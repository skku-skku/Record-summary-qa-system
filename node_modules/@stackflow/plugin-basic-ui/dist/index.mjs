var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));

// src/assets/IconBack.tsx
import { jsx } from "react/jsx-runtime";
var IconBack = (props) => /* @__PURE__ */ jsx(
  "svg",
  {
    className: props.className,
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: /* @__PURE__ */ jsx(
      "path",
      {
        d: "M11.5659 5.56564C11.8783 5.25322 11.8783 4.74669 11.5659 4.43427C11.2535 4.12185 10.7469 4.12185 10.4345 4.43427L3.43451 11.4343C3.12209 11.7467 3.12209 12.2532 3.43451 12.5656L10.4345 19.5656C10.7469 19.8781 11.2535 19.8781 11.5659 19.5656C11.8783 19.2532 11.8783 18.7467 11.5659 18.4343L5.93157 12.8H20.0002C20.442 12.8 20.8002 12.4418 20.8002 12C20.8002 11.5581 20.442 11.2 20.0002 11.2H5.93157L11.5659 5.56564Z",
        fill: "currentColor"
      }
    )
  }
);
var IconBack_default = IconBack;

// src/assets/IconClose.tsx
import { jsx as jsx2, jsxs } from "react/jsx-runtime";
var IconClose = (props) => /* @__PURE__ */ jsxs(
  "svg",
  {
    className: props.className,
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    children: [
      /* @__PURE__ */ jsx2(
        "path",
        {
          d: "M6.56588 5.43433C6.25346 5.12191 5.74693 5.12191 5.43451 5.43433C5.12209 5.74675 5.12209 6.25328 5.43451 6.5657L10.8688 12L5.43451 17.4343C5.12209 17.7467 5.12209 18.2533 5.43451 18.5657C5.74693 18.8781 6.25346 18.8781 6.56588 18.5657L12.0002 13.1314L17.4345 18.5657C17.7469 18.8781 18.2535 18.8781 18.5659 18.5657C18.8783 18.2533 18.8783 17.7467 18.5659 17.4343L13.1316 12L18.5659 6.5657C18.8783 6.25328 18.8783 5.74675 18.5659 5.43433C18.2535 5.12191 17.7469 5.12191 17.4345 5.43433L12.0002 10.8686L6.56588 5.43433Z",
          fill: "currentColor"
        }
      ),
      /* @__PURE__ */ jsx2(
        "path",
        {
          d: "M6.56588 5.43433C6.25346 5.12191 5.74693 5.12191 5.43451 5.43433C5.12209 5.74675 5.12209 6.25328 5.43451 6.5657L10.8688 12L5.43451 17.4343C5.12209 17.7467 5.12209 18.2533 5.43451 18.5657C5.74693 18.8781 6.25346 18.8781 6.56588 18.5657L12.0002 13.1314L17.4345 18.5657C17.7469 18.8781 18.2535 18.8781 18.5659 18.5657C18.8783 18.2533 18.8783 17.7467 18.5659 17.4343L13.1316 12L18.5659 6.5657C18.8783 6.25328 18.8783 5.74675 18.5659 5.43433C18.2535 5.12191 17.7469 5.12191 17.4345 5.43433L12.0002 10.8686L6.56588 5.43433Z",
          fill: "currentColor"
        }
      )
    ]
  }
);
var IconClose_default = IconClose;

// src/basicUIPlugin.tsx
import { assignInlineVars } from "@vanilla-extract/dynamic";
import { createContext, useContext } from "react";

// src/basicUIPlugin.css.ts
import { createRuntimeFn as _7a468 } from "@vanilla-extract/recipes/createRuntimeFn";
var globalVars = { backgroundColor: "var(--stackflow-plugin-basic-ui-background-color)", dimBackgroundColor: "var(--stackflow-plugin-basic-ui-dim-background-color)", transitionDuration: "var(--stackflow-plugin-basic-ui-transition-duration)", computedTransitionDuration: "var(--stackflow-plugin-basic-ui-computed-transition-duration)", appBar: { borderColor: "var(--stackflow-plugin-basic-ui-app-bar-border-color)", borderSize: "var(--stackflow-plugin-basic-ui-app-bar-border-size)", height: "var(--stackflow-plugin-basic-ui-app-bar-height)", heightTransitionDuration: "var(--stackflow-plugin-basic-ui-app-bar-height-transition-duration)", minHeight: "var(--stackflow-plugin-basic-ui-app-bar-min-height)", iconColor: "var(--stackflow-plugin-basic-ui-app-bar-icon-color)", textColor: "var(--stackflow-plugin-basic-ui-app-bar-text-color)", backgroundColor: "var(--stackflow-plugin-basic-ui-app-bar-background-color)", overflow: "var(--stackflow-plugin-basic-ui-app-bar-overflow)" }, bottomSheet: { borderRadius: "var(--stackflow-plugin-basic-ui-bottom-sheet-border-radius)" }, modal: { borderRadius: "var(--stackflow-plugin-basic-ui-bottom-sheet-border-radius)" } };
var stackWrapper = _7a468({ defaultClassName: "_1q6dj2j2", variantClassNames: { theme: { android: "_1q6dj2j0", cupertino: "_1q6dj2j1" }, loading: { true: "_1q6dj2j5" } }, defaultVariants: {}, compoundVariants: [] });

// src/utils/compact.ts
function compact(arr) {
  return arr.filter(
    (item) => item !== void 0 && item !== null
  );
}

// src/utils/compactMap.ts
function compactMap(obj) {
  return Object.entries(obj).reduce((acc, [key, value]) => {
    if (value !== null && value !== void 0) {
      acc[key] = value;
    }
    return acc;
  }, {});
}

// src/utils/listenOnce.ts
function listenOnce(el, type, cb) {
  const listener = () => {
    el.removeEventListener(type, listener);
    cb();
  };
  el.addEventListener(type, listener);
}

// src/utils/listenResize.ts
var listenResize = (cb) => {
  cb();
  window.addEventListener("resize", cb);
  return () => {
    window.removeEventListener("resize", cb);
  };
};

// src/utils/noop.ts
var noop = () => {
};

// src/utils/requestNextFrame.tsx
function requestNextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(() => {
      cb();
    });
  });
}

// src/basicUIPlugin.tsx
import { jsx as jsx3 } from "react/jsx-runtime";
var GlobalOptionsContext = createContext({
  theme: "android"
});
var GlobalOptionsProvider = GlobalOptionsContext.Provider;
function useGlobalOptions() {
  return useContext(GlobalOptionsContext);
}
var basicUIPlugin = (options) => () => ({
  key: "basic-ui",
  wrapStack({ stack, initialContext }) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i;
    const _options = typeof options === "function" ? options({ initialContext }) : options;
    return /* @__PURE__ */ jsx3(
      GlobalOptionsProvider,
      {
        value: __spreadProps(__spreadValues({}, options), {
          theme: (_a = initialContext == null ? void 0 : initialContext.theme) != null ? _a : _options.theme
        }),
        children: /* @__PURE__ */ jsx3(
          "div",
          {
            className: compact([
              stackWrapper({
                theme: (_b = initialContext == null ? void 0 : initialContext.theme) != null ? _b : _options.theme,
                loading: stack.globalTransitionState === "loading"
              }),
              _options.rootClassName
            ]).join(" "),
            style: assignInlineVars(
              compactMap({
                [globalVars.backgroundColor]: _options.backgroundColor,
                [globalVars.dimBackgroundColor]: _options.dimBackgroundColor,
                [globalVars.transitionDuration]: `${stack.transitionDuration}ms`,
                [globalVars.computedTransitionDuration]: stack.globalTransitionState === "loading" ? `${stack.transitionDuration}ms` : "0ms",
                [globalVars.appBar.borderColor]: (_c = _options.appBar) == null ? void 0 : _c.borderColor,
                [globalVars.appBar.borderSize]: (_d = _options.appBar) == null ? void 0 : _d.borderSize,
                [globalVars.appBar.height]: (_e = _options.appBar) == null ? void 0 : _e.height,
                [globalVars.appBar.iconColor]: (_f = _options.appBar) == null ? void 0 : _f.iconColor,
                [globalVars.appBar.textColor]: (_g = _options.appBar) == null ? void 0 : _g.textColor,
                [globalVars.bottomSheet.borderRadius]: (_h = _options.bottomSheet) == null ? void 0 : _h.borderRadius,
                [globalVars.modal.borderRadius]: (_i = _options.modal) == null ? void 0 : _i.borderRadius
              })
            ),
            children: stack.render()
          }
        )
      }
    );
  }
});

// src/components/AppScreen.tsx
import { useActions as useActions2 } from "@stackflow/react";
import { assignInlineVars as assignInlineVars3 } from "@vanilla-extract/dynamic";
import { createContext as createContext2, useContext as useContext2, useMemo, useRef as useRef2 } from "react";

// src/hooks/useLazy.tsx
import { useEffect, useState } from "react";
function useLazy(value) {
  const [state, setState] = useState(void 0);
  useEffect(() => {
    requestNextFrame(() => {
      setState(value);
    });
  }, [value]);
  return state;
}

// src/hooks/useMaxWidth.ts
import { useEffect as useEffect2, useState as useState2 } from "react";
function useMaxWidth({
  outerRef,
  innerRef,
  enable
}) {
  const [maxWidth, setMaxWidth] = useState2(void 0);
  useEffect2(() => {
    const $outer = outerRef && "current" in outerRef && outerRef.current;
    const $inner = innerRef.current;
    if (!enable || !$outer || !$inner) {
      return noop;
    }
    const dispose = listenResize(() => {
      const screenWidth = $outer.clientWidth;
      const leftWidth = $inner.offsetLeft;
      const centerWidth = $inner.clientWidth;
      const rightWidth = screenWidth - leftWidth - centerWidth;
      const sideMargin = Math.max(leftWidth, rightWidth);
      setMaxWidth(screenWidth - 2 * sideMargin);
    });
    return dispose;
  }, []);
  return {
    maxWidth
  };
}

// src/hooks/useNullableActivity.ts
import { useActivity } from "@stackflow/react";
function useNullableActivity() {
  return useActivity();
}

// src/hooks/useStyleEffect.ts
import { useEffect as useEffect3 } from "react";
var connections = {};
function useStyleEffect({
  styleName,
  refs,
  effect,
  effectDeps
}) {
  const activity = useNullableActivity();
  useEffect3(() => {
    if (!activity) {
      return noop;
    }
    if (!connections[styleName]) {
      connections[styleName] = /* @__PURE__ */ new Map();
    }
    connections[styleName].set(activity.zIndex, {
      refs,
      hasEffect: !!effect
    });
    return () => {
      connections[styleName].delete(activity.zIndex);
    };
  }, [activity == null ? void 0 : activity.id, refs, effect]);
  useEffect3(() => {
    if (!activity) {
      return noop;
    }
    if (!effect) {
      return noop;
    }
    const refs2 = (() => {
      let arr = [];
      for (let i = 1; i <= activity.zIndex; i += 1) {
        const connection = connections[styleName].get(activity.zIndex - i);
        if (connection == null ? void 0 : connection.refs) {
          arr = [...arr, ...connection.refs];
        }
        if (connection == null ? void 0 : connection.hasEffect) {
          break;
        }
      }
      return arr;
    })();
    const cleanup = effect({
      activityTransitionState: activity.transitionState,
      refs: refs2
    });
    return () => {
      cleanup == null ? void 0 : cleanup();
    };
  }, [activity == null ? void 0 : activity.transitionState, ...effectDeps != null ? effectDeps : []]);
}

// src/hooks/useStyleEffectHide.ts
function useStyleEffectHide({
  refs,
  hasEffect
}) {
  useStyleEffect({
    styleName: "hide",
    refs,
    effect: hasEffect ? ({ activityTransitionState, refs: refs2 }) => {
      const cleanup = () => {
        refs2.forEach((ref) => {
          if (!ref.current) {
            return;
          }
          const $ref = ref.current;
          $ref.style.display = "";
        });
      };
      switch (activityTransitionState) {
        case "enter-done": {
          refs2.forEach((ref) => {
            if (!ref.current) {
              return;
            }
            const $ref = ref.current;
            $ref.style.display = "none";
          });
          return () => {
            cleanup();
          };
        }
        default: {
          cleanup();
          return noop;
        }
      }
    } : void 0
  });
}

// src/hooks/useStyleEffectOffset.ts
var OFFSET_PX_ANDROID = 32;
var OFFSET_PX_CUPERTINO = 80;
function useStyleEffectOffset({
  refs,
  theme,
  hasEffect
}) {
  useStyleEffect({
    styleName: "offset",
    refs,
    effect: hasEffect ? ({ activityTransitionState, refs: refs2 }) => {
      const transform = theme === "cupertino" ? `translate3d(-${OFFSET_PX_CUPERTINO / 16}rem, 0, 0)` : `translate3d(0, -${OFFSET_PX_ANDROID / 16}rem, 0)`;
      const cleanup = () => {
        requestNextFrame(() => {
          refs2.forEach((ref) => {
            if (!ref.current) {
              return;
            }
            const $el = ref.current;
            $el.style.transform = "";
            listenOnce($el, "transitionend", () => {
              $el.style.transition = "";
            });
          });
        });
      };
      switch (activityTransitionState) {
        case "enter-active":
        case "enter-done": {
          refs2.forEach((ref) => {
            if (!ref.current) {
              return;
            }
            ref.current.style.transition = globalVars.computedTransitionDuration;
            ref.current.style.transform = transform;
          });
          switch (activityTransitionState) {
            case "enter-done":
              return () => {
                cleanup();
              };
            case "enter-active":
            default:
              return noop;
          }
        }
        case "exit-active":
        case "exit-done": {
          requestNextFrame(() => {
            cleanup();
          });
          return noop;
        }
        default: {
          return noop;
        }
      }
    } : void 0
  });
}

// src/components/AppScreen.css.ts
import { createRuntimeFn as _7a4682 } from "@vanilla-extract/recipes/createRuntimeFn";
var appScreen = _7a4682({ defaultClassName: "dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 dhthxqc", variantClassNames: { transitionState: { "enter-active": "_1dlf4349", "enter-done": "_1dlf434a", "exit-active": "_1dlf434b", "exit-done": "_1dlf434c" } }, defaultVariants: {}, compoundVariants: [] });
var dim = "_1dlf434i dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 _1dlf4346 _1dlf4348";
var edge = _7a4682({ defaultClassName: "_1dlf434m dhthxq4 dhthxq2 dhthxq3 dhthxq1", variantClassNames: { hasAppBar: { true: "_1dlf434n" } }, defaultVariants: {}, compoundVariants: [] });
var exitActive = "_1dlf434b";
var exitDone = "_1dlf434c";
var paper = _7a4682({ defaultClassName: "_1dlf434j dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 _1dlf4347 _1dlf4348", variantClassNames: { hasAppBar: { true: "_1dlf434k dhthxqg" }, presentModalFullScreen: { true: "_1dlf434l" } }, defaultVariants: {}, compoundVariants: [] });
var vars = { transitionDuration: "var(--_1dlf4340)", zIndexes: { dim: "var(--_1dlf4341)", paper: "var(--_1dlf4342)", edge: "var(--_1dlf4343)", appBar: "var(--_1dlf4344)" }, appBar: { center: { mainWidth: "var(--_1dlf4345)" } } };

// src/hooks/useStyleEffectSwipeBack.ts
function useStyleEffectSwipeBack({
  theme,
  dimRef,
  edgeRef,
  paperRef,
  hasEffect,
  prevented,
  onSwiped
}) {
  useStyleEffect({
    styleName: "swipe-back",
    refs: [paperRef],
    effect: hasEffect ? ({ refs }) => {
      if (theme !== "cupertino") {
        return noop;
      }
      if (!dimRef.current || !edgeRef.current || !paperRef.current) {
        return noop;
      }
      const $dim = dimRef.current;
      const $edge = edgeRef.current;
      const $paper = paperRef.current;
      let x0 = null;
      let t0 = null;
      let x = null;
      let cachedRefs = [];
      const resetState = () => {
        x0 = null;
        t0 = null;
        x = null;
        cachedRefs = [];
      };
      let _rAFLock = false;
      function movePaper(dx) {
        if (!_rAFLock) {
          _rAFLock = true;
          requestAnimationFrame(() => {
            const p = dx / $paper.clientWidth;
            $dim.style.opacity = `${1 - p}`;
            $dim.style.transition = "0s";
            $paper.style.overflowY = "hidden";
            $paper.style.transform = `translate3d(${dx}px, 0, 0)`;
            $paper.style.transition = "0s";
            refs.forEach((ref) => {
              var _a;
              if (!ref.current) {
                return;
              }
              ref.current.style.transform = `translate3d(${-1 * (1 - p) * OFFSET_PX_CUPERTINO}px, 0, 0)`;
              ref.current.style.transition = "0s";
              if (((_a = ref.current.parentElement) == null ? void 0 : _a.style.display) === "none") {
                ref.current.parentElement.style.display = "block";
              }
            });
            _rAFLock = false;
          });
        }
      }
      function resetPaper({ swiped }) {
        return new Promise((resolve) => {
          requestAnimationFrame(() => {
            $dim.style.opacity = `${swiped ? 0 : 1}`;
            $dim.style.transition = globalVars.transitionDuration;
            $paper.style.overflowY = "hidden";
            $paper.style.transform = `translateX(${swiped ? "100%" : "0"})`;
            $paper.style.transition = globalVars.transitionDuration;
            refs.forEach((ref) => {
              if (!ref.current) {
                return;
              }
              ref.current.style.transition = globalVars.transitionDuration;
              ref.current.style.transform = `translate3d(${swiped ? "0" : `-${OFFSET_PX_CUPERTINO / 16}rem`}, 0, 0)`;
            });
            const _cachedRefs = [...cachedRefs];
            resolve();
            listenOnce($paper, "transitionend", () => {
              var _a, _b;
              const _swiped = swiped || ((_a = $paper.parentElement) == null ? void 0 : _a.classList.contains(
                exitActive
              )) || ((_b = $paper.parentElement) == null ? void 0 : _b.classList.contains(
                exitDone
              ));
              $dim.style.opacity = "";
              $paper.style.overflowY = "";
              $paper.style.transform = "";
              refs.forEach((ref, i) => {
                if (!ref.current) {
                  return;
                }
                const _cachedRef = _cachedRefs[i];
                if (_swiped) {
                  ref.current.style.transition = "";
                  ref.current.style.transform = "";
                  if (ref.current.parentElement) {
                    ref.current.parentElement.style.display = "";
                  }
                } else if (_cachedRef) {
                  ref.current.style.transition = _cachedRef.style.transition;
                  ref.current.style.transform = _cachedRef.style.transform;
                  if (ref.current.parentElement && _cachedRef.parentElement) {
                    ref.current.parentElement.style.display = _cachedRef.parentElement.style.display;
                  }
                }
              });
            });
          });
        });
      }
      const onTouchStart = (e) => {
        var _a;
        const { activeElement } = document;
        (_a = activeElement == null ? void 0 : activeElement.blur) == null ? void 0 : _a.call(activeElement);
        x0 = x = e.touches[0].clientX;
        t0 = Date.now();
        cachedRefs = refs.map((ref) => {
          if (!ref.current) {
            return {
              style: {
                transform: "",
                transition: ""
              }
            };
          }
          return {
            style: {
              transform: ref.current.style.transform,
              transition: ref.current.style.transition
            },
            parentElement: ref.current.parentElement ? {
              style: {
                display: ref.current.parentElement.style.display
              }
            } : void 0
          };
        });
      };
      const onTouchMove = (e) => {
        if (!x0) {
          resetState();
          return;
        }
        x = e.touches[0].clientX;
        movePaper(x - x0);
      };
      const onTouchEnd = () => {
        if (!x0 || !t0 || !x) {
          resetState();
          return;
        }
        const t = Date.now();
        const v = (x - x0) / (t - t0);
        const swiped = v > 1 || x / $paper.clientWidth > 0.4;
        if (swiped) {
          onSwiped == null ? void 0 : onSwiped();
        }
        Promise.resolve().then(() => resetPaper({ swiped })).then(() => resetState());
      };
      $edge.addEventListener("touchstart", onTouchStart, { passive: true });
      $edge.addEventListener("touchmove", onTouchMove, { passive: true });
      $edge.addEventListener("touchend", onTouchEnd, { passive: true });
      $edge.addEventListener("touchcancel", onTouchEnd, { passive: true });
      return () => {
        $edge.removeEventListener("touchstart", onTouchStart);
        $edge.removeEventListener("touchmove", onTouchMove);
        $edge.removeEventListener("touchend", onTouchEnd);
        $edge.removeEventListener("touchcancel", onTouchEnd);
      };
    } : void 0,
    effectDeps: [prevented]
  });
}

// src/components/AppBar.tsx
import { useActions } from "@stackflow/react";
import { assignInlineVars as assignInlineVars2 } from "@vanilla-extract/dynamic";
import { forwardRef, useRef } from "react";

// src/components/AppBar.css.ts
import { createRuntimeFn as _7a4683 } from "@vanilla-extract/recipes/createRuntimeFn";
var appBar = _7a4683({ defaultClassName: "_1yk3a452 dhthxq4 dhthxq0 dhthxqh _1dlf4347 _1yk3a451", variantClassNames: { border: { true: "_1yk3a453" }, presentModalFullScreen: { true: "_1yk3a454" } }, defaultVariants: {}, compoundVariants: [] });
var backButton = "_1yk3a458 dhthxq9 dhthxq7 dhthxqb dhthxqf dhthxqi";
var center = "dhthxq9 dhthxq7 dhthxq8 _1yk3a450";
var centerMain = _7a4683({ defaultClassName: "_1yk3a45b", variantClassNames: { hasLeft: { true: "_1yk3a45c" } }, defaultVariants: {}, compoundVariants: [] });
var centerMainEdge = "_1yk3a45d dhthxqi dhthxq4 dhthxq2 dhthxqf";
var centerText = "_1yk3a45e dhthxqc dhthxqd dhthxq0";
var closeButton = "_1yk3a458 dhthxq9 dhthxq7 dhthxqb dhthxqf dhthxqi";
var container = "_1yk3a456 dhthxqa dhthxq7 _1yk3a451";
var left = "_1yk3a457 dhthxq9 dhthxq7 dhthxq1 _1yk3a450";
var right = "_1yk3a45f dhthxq9 dhthxq7 dhthxq1 dhthxq5 _1yk3a450";
var safeArea = "_1yk3a455";

// src/components/AppBar.tsx
import { jsx as jsx4, jsxs as jsxs2 } from "react/jsx-runtime";
var AppBar = forwardRef(
  ({
    title,
    appendLeft,
    appendRight,
    backButton: backButton2,
    closeButton: closeButton2,
    closeButtonLocation = "left",
    border = true,
    modalPresentationStyle,
    iconColor,
    textColor,
    borderColor,
    borderSize,
    height,
    heightTransitionDuration,
    overflow,
    backgroundColor,
    onTopClick
  }, ref) => {
    var _a, _b;
    const actions = useActions();
    const activity = useNullableActivity();
    const globalOptions = useGlobalOptions();
    const globalCloseButton = (_a = globalOptions.appBar) == null ? void 0 : _a.closeButton;
    const globalBackButton = (_b = globalOptions.appBar) == null ? void 0 : _b.backButton;
    const centerRef = useRef(null);
    const { maxWidth } = useMaxWidth({
      outerRef: ref,
      innerRef: centerRef,
      enable: globalOptions.theme === "cupertino"
    });
    const presentModalFullScreen = modalPresentationStyle === "fullScreen";
    const onBackClick = (e) => {
      if (backButton2 && "onClick" in backButton2 && backButton2.onClick) {
        backButton2.onClick(e);
      }
      if (!e.defaultPrevented) {
        actions.pop();
      }
    };
    const renderBackButton = () => {
      var _a2, _b2;
      if (!activity) {
        return null;
      }
      if (activity.isRoot) {
        return null;
      }
      if (!backButton2 && !globalBackButton) {
        return /* @__PURE__ */ jsx4(
          "button",
          {
            type: "button",
            className: backButton,
            onClick: onBackClick,
            children: /* @__PURE__ */ jsx4(IconBack_default, {})
          }
        );
      }
      if (backButton2 && "render" in backButton2 && backButton2.render) {
        return (_a2 = backButton2.render) == null ? void 0 : _a2.call(backButton2);
      }
      if (globalBackButton && "render" in globalBackButton && globalBackButton.render) {
        return (_b2 = globalBackButton.render) == null ? void 0 : _b2.call(globalBackButton);
      }
      return /* @__PURE__ */ jsx4(
        "button",
        {
          type: "button",
          className: backButton,
          "aria-label": backButton2 && "ariaLabel" in backButton2 ? backButton2.ariaLabel : globalBackButton && "ariaLabel" in globalBackButton ? globalBackButton.ariaLabel : void 0,
          onClick: onBackClick,
          children: (() => {
            if (backButton2 && "renderIcon" in backButton2 && backButton2.renderIcon) {
              return backButton2.renderIcon();
            }
            if (globalBackButton && "renderIcon" in globalBackButton && globalBackButton.renderIcon) {
              return globalBackButton.renderIcon();
            }
            if (presentModalFullScreen) {
              return /* @__PURE__ */ jsx4(IconClose_default, {});
            }
            return /* @__PURE__ */ jsx4(IconBack_default, {});
          })()
        }
      );
    };
    const onCloseClick = (e) => {
      var _a2;
      if (closeButton2 && "onClick" in closeButton2 && closeButton2.onClick) {
        closeButton2.onClick(e);
      }
      if (!e.defaultPrevented && globalCloseButton && "onClick" in globalCloseButton) {
        (_a2 = globalCloseButton.onClick) == null ? void 0 : _a2.call(globalCloseButton, e);
      }
    };
    const renderCloseButton = () => {
      var _a2;
      const isRoot = !activity || activity.isRoot;
      const showCloseButton = (closeButton3) => closeButton3 && "render" in closeButton3 && closeButton3.render || closeButton3 && "renderIcon" in closeButton3 && closeButton3.renderIcon || closeButton3 && "onClick" in closeButton3 && closeButton3.onClick;
      if (!(showCloseButton(closeButton2) || showCloseButton((_a2 = globalOptions.appBar) == null ? void 0 : _a2.closeButton)) || !isRoot) {
        return null;
      }
      if (closeButton2 && "render" in closeButton2 && closeButton2.render) {
        return closeButton2.render();
      }
      if (globalCloseButton && "render" in globalCloseButton && globalCloseButton.render) {
        return globalCloseButton.render();
      }
      return /* @__PURE__ */ jsx4(
        "button",
        {
          type: "button",
          className: closeButton,
          "aria-label": closeButton2 && "ariaLabel" in closeButton2 ? closeButton2.ariaLabel : globalCloseButton && "ariaLabel" in globalCloseButton ? globalCloseButton.ariaLabel : void 0,
          onClick: onCloseClick,
          children: (() => {
            if (closeButton2 && "renderIcon" in closeButton2 && closeButton2.renderIcon) {
              return closeButton2.renderIcon();
            }
            if (globalCloseButton && "renderIcon" in globalCloseButton && globalCloseButton.renderIcon) {
              return globalCloseButton.renderIcon();
            }
            return /* @__PURE__ */ jsx4(IconClose_default, {});
          })()
        }
      );
    };
    const hasLeft = !!(closeButtonLocation === "left" && closeButton2 || backButton2 || appendLeft);
    return /* @__PURE__ */ jsxs2(
      "div",
      {
        ref,
        className: appBar({
          border,
          presentModalFullScreen
        }),
        style: assignInlineVars2(
          compactMap({
            [globalVars.appBar.iconColor]: iconColor,
            [globalVars.appBar.textColor]: textColor,
            [globalVars.appBar.borderColor]: borderColor,
            [globalVars.appBar.borderSize]: borderSize,
            [globalVars.appBar.height]: height,
            [globalVars.appBar.heightTransitionDuration]: heightTransitionDuration,
            [globalVars.appBar.overflow]: overflow,
            [globalVars.appBar.backgroundColor]: backgroundColor || globalVars.backgroundColor,
            [vars.appBar.center.mainWidth]: `${maxWidth}px`
          })
        ),
        children: [
          /* @__PURE__ */ jsx4("div", { className: safeArea }),
          /* @__PURE__ */ jsxs2("div", { className: container, children: [
            /* @__PURE__ */ jsxs2("div", { className: left, children: [
              closeButtonLocation === "left" && renderCloseButton(),
              renderBackButton(),
              appendLeft == null ? void 0 : appendLeft()
            ] }),
            /* @__PURE__ */ jsx4("div", { ref: centerRef, className: center, children: /* @__PURE__ */ jsxs2(
              "div",
              {
                className: centerMain({
                  hasLeft
                }),
                children: [
                  typeof title === "string" ? /* @__PURE__ */ jsx4("div", { className: centerText, children: title }) : title,
                  /* @__PURE__ */ jsx4(
                    "button",
                    {
                      className: centerMainEdge,
                      type: "button",
                      "aria-hidden": "true",
                      onClick: onTopClick
                    }
                  )
                ]
              }
            ) }),
            /* @__PURE__ */ jsxs2("div", { className: right, children: [
              appendRight == null ? void 0 : appendRight(),
              closeButtonLocation === "right" && renderCloseButton()
            ] })
          ] })
        ]
      }
    );
  }
);
AppBar.displayName = "AppBar";
var AppBar_default = AppBar;

// src/components/AppScreen.tsx
import { jsx as jsx5, jsxs as jsxs3 } from "react/jsx-runtime";
var Context = createContext2(null);
function useAppScreen() {
  return useContext2(Context);
}
var AppScreen = ({
  backgroundColor,
  dimBackgroundColor,
  appBar: appBar2,
  preventSwipeBack,
  modalPresentationStyle,
  children
}) => {
  var _a, _b;
  const globalOptions = useGlobalOptions();
  const activity = useNullableActivity();
  const { pop } = useActions2();
  const appScreenRef = useRef2(null);
  const dimRef = useRef2(null);
  const paperRef = useRef2(null);
  const edgeRef = useRef2(null);
  const appBarRef = useRef2(null);
  const presentModalFullScreen = modalPresentationStyle === "fullScreen";
  const swipeBackPrevented = preventSwipeBack || presentModalFullScreen;
  useStyleEffectHide({
    refs: [appScreenRef],
    hasEffect: true
  });
  useStyleEffectOffset({
    theme: globalOptions.theme,
    refs: globalOptions.theme === "cupertino" ? [paperRef] : [paperRef, appBarRef],
    hasEffect: !presentModalFullScreen
  });
  useStyleEffectSwipeBack({
    theme: globalOptions.theme,
    dimRef,
    edgeRef,
    paperRef,
    hasEffect: true,
    prevented: swipeBackPrevented,
    onSwiped() {
      pop();
    }
  });
  const hasAppBar = !!appBar2;
  const zIndexBase = ((_a = activity == null ? void 0 : activity.zIndex) != null ? _a : 0) * 5;
  const zIndexDim = zIndexBase;
  const zIndexPaper = zIndexBase + (globalOptions.theme === "cupertino" && hasAppBar ? 1 : 3);
  const zIndexEdge = zIndexBase + 4;
  const zIndexAppBar = globalOptions.theme === "cupertino" ? zIndexBase + 7 : zIndexBase + 4;
  const transitionState = (_b = activity == null ? void 0 : activity.transitionState) != null ? _b : "enter-done";
  const lazyTransitionState = useLazy(transitionState);
  const onAppBarTopClick = (e) => {
    var _a2, _b2;
    (_a2 = appBar2 == null ? void 0 : appBar2.onTopClick) == null ? void 0 : _a2.call(appBar2, e);
    if (!e.defaultPrevented) {
      (_b2 = paperRef.current) == null ? void 0 : _b2.scroll({
        top: 0,
        behavior: "smooth"
      });
    }
  };
  return /* @__PURE__ */ jsx5(
    Context.Provider,
    {
      value: useMemo(
        () => ({
          scroll({ top }) {
            var _a2;
            (_a2 = paperRef == null ? void 0 : paperRef.current) == null ? void 0 : _a2.scroll({
              top,
              behavior: "smooth"
            });
          }
        }),
        [paperRef]
      ),
      children: /* @__PURE__ */ jsxs3(
        "div",
        {
          ref: appScreenRef,
          className: appScreen({
            transitionState: transitionState === "enter-done" || transitionState === "exit-done" ? transitionState : lazyTransitionState
          }),
          style: assignInlineVars3(
            compactMap({
              [globalVars.backgroundColor]: backgroundColor,
              [globalVars.dimBackgroundColor]: dimBackgroundColor,
              [globalVars.appBar.height]: appBar2 == null ? void 0 : appBar2.height,
              [globalVars.appBar.heightTransitionDuration]: appBar2 == null ? void 0 : appBar2.heightTransitionDuration,
              [vars.zIndexes.dim]: `${zIndexDim}`,
              [vars.zIndexes.paper]: `${zIndexPaper}`,
              [vars.zIndexes.edge]: `${zIndexEdge}`,
              [vars.zIndexes.appBar]: `${zIndexAppBar}`,
              [vars.transitionDuration]: transitionState === "enter-active" || transitionState === "exit-active" ? globalVars.computedTransitionDuration : "0ms"
            })
          ),
          children: [
            /* @__PURE__ */ jsx5("div", { className: dim, ref: dimRef }),
            appBar2 && /* @__PURE__ */ jsx5(
              AppBar_default,
              __spreadProps(__spreadValues({}, appBar2), {
                ref: appBarRef,
                modalPresentationStyle,
                onTopClick: onAppBarTopClick
              })
            ),
            /* @__PURE__ */ jsx5(
              "div",
              {
                className: paper({
                  hasAppBar,
                  presentModalFullScreen
                }),
                ref: paperRef,
                children
              },
              activity == null ? void 0 : activity.id
            ),
            !(activity == null ? void 0 : activity.isRoot) && globalOptions.theme === "cupertino" && !swipeBackPrevented && /* @__PURE__ */ jsx5("div", { className: edge({ hasAppBar }), ref: edgeRef })
          ]
        }
      )
    }
  );
};
AppScreen.displayName = "AppScreen";
var AppScreen_default = AppScreen;

// src/components/BottomSheet.tsx
import { useActions as useActions3 } from "@stackflow/react";
import { assignInlineVars as assignInlineVars4 } from "@vanilla-extract/dynamic";
import { useRef as useRef3 } from "react";

// src/components/BottomSheet.css.ts
import { createRuntimeFn as _7a4684 } from "@vanilla-extract/recipes/createRuntimeFn";
var container2 = _7a4684({ defaultClassName: "dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 dhthxqc", variantClassNames: { transitionState: { "enter-active": "_1ht38h04", "enter-done": "_1ht38h05", "exit-active": "_1ht38h06", "exit-done": "_1ht38h07" } }, defaultVariants: {}, compoundVariants: [] });
var dim2 = "_1ht38h0d dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 dhthxqc dhthxqa dhthxq7 _1ht38h03";
var paper2 = "_1ht38h0e dhthxqc _1ht38h03";
var vars2 = { transitionDuration: "var(--_1ht38h00)", zIndexes: { dim: "var(--_1ht38h01)", paper: "var(--_1ht38h02)" } };

// src/components/BottomSheet.tsx
import { jsx as jsx6 } from "react/jsx-runtime";
var BottomSheet = ({
  borderRadius = "1rem",
  backgroundColor,
  dimBackgroundColor,
  onOutsideClick,
  children
}) => {
  var _a, _b, _c;
  const activity = useNullableActivity();
  const { pop } = useActions3();
  const containerRef = useRef3(null);
  const paperRef = useRef3(null);
  useStyleEffect({
    styleName: "hide",
    refs: [containerRef]
  });
  useStyleEffect({
    styleName: "offset",
    refs: [paperRef]
  });
  useStyleEffect({
    styleName: "swipe-back",
    refs: [paperRef]
  });
  const popLock = useRef3(false);
  const onDimClick = (e) => {
    onOutsideClick == null ? void 0 : onOutsideClick(e);
    if (e.defaultPrevented) {
      return;
    }
    if (popLock.current) {
      return;
    }
    popLock.current = true;
    pop();
  };
  const onPaperClick = (e) => {
    e.stopPropagation();
  };
  const zIndexBase = ((_a = activity == null ? void 0 : activity.zIndex) != null ? _a : 0) * 5 + 3;
  const zIndexPaper = ((_b = activity == null ? void 0 : activity.zIndex) != null ? _b : 0) * 5 + 4;
  const transitionState = (_c = activity == null ? void 0 : activity.transitionState) != null ? _c : "enter-done";
  return /* @__PURE__ */ jsx6(
    "div",
    {
      className: container2({
        transitionState: useLazy(transitionState)
      }),
      ref: containerRef,
      style: assignInlineVars4(
        compactMap({
          [globalVars.bottomSheet.borderRadius]: borderRadius,
          [globalVars.backgroundColor]: backgroundColor,
          [globalVars.dimBackgroundColor]: dimBackgroundColor,
          [vars2.zIndexes.dim]: `${zIndexBase}`,
          [vars2.zIndexes.paper]: `${zIndexPaper}`,
          [vars2.transitionDuration]: transitionState === "enter-active" || transitionState === "exit-active" ? globalVars.computedTransitionDuration : "0ms"
        })
      ),
      children: /* @__PURE__ */ jsx6("div", { className: dim2, ref: paperRef, onClick: onDimClick, children: /* @__PURE__ */ jsx6("div", { className: paper2, onClick: onPaperClick, children }) })
    }
  );
};
BottomSheet.displayName = "BottomSheet";
var BottomSheet_default = BottomSheet;

// src/components/Modal.tsx
import { useActions as useActions4 } from "@stackflow/react";
import { assignInlineVars as assignInlineVars5 } from "@vanilla-extract/dynamic";
import { useRef as useRef4 } from "react";

// src/components/Modal.css.ts
import { createRuntimeFn as _7a4685 } from "@vanilla-extract/recipes/createRuntimeFn";
var container3 = _7a4685({ defaultClassName: "dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 dhthxqc", variantClassNames: { transitionState: { "enter-active": "_5ozg8c4", "enter-done": "_5ozg8c5", "exit-active": "_5ozg8c6", "exit-done": "_5ozg8c7" } }, defaultVariants: {}, compoundVariants: [] });
var dim3 = "_5ozg8cd dhthxq4 dhthxq0 dhthxq1 dhthxq2 dhthxq3 dhthxqc dhthxq9 dhthxq7 dhthxqb _5ozg8c3";
var paper3 = "_5ozg8ce dhthxqc _5ozg8c3";
var vars3 = { transitionDuration: "var(--_5ozg8c0)", zIndexes: { dim: "var(--_5ozg8c1)", paper: "var(--_5ozg8c2)" } };

// src/components/Modal.tsx
import { jsx as jsx7 } from "react/jsx-runtime";
var Modal = ({
  backgroundColor,
  dimBackgroundColor,
  borderRadius = "1rem",
  onOutsideClick,
  children
}) => {
  var _a, _b, _c;
  const activity = useNullableActivity();
  const { pop } = useActions4();
  const containerRef = useRef4(null);
  const paperRef = useRef4(null);
  useStyleEffect({
    styleName: "hide",
    refs: [containerRef]
  });
  useStyleEffect({
    styleName: "offset",
    refs: [paperRef]
  });
  useStyleEffect({
    styleName: "swipe-back",
    refs: [paperRef]
  });
  const popLock = useRef4(false);
  const onDimClick = (e) => {
    onOutsideClick == null ? void 0 : onOutsideClick(e);
    if (e.defaultPrevented) {
      return;
    }
    if (popLock.current) {
      return;
    }
    popLock.current = true;
    pop();
  };
  const onPaperClick = (e) => {
    e.stopPropagation();
  };
  const zIndexBase = ((_a = activity == null ? void 0 : activity.zIndex) != null ? _a : 0) * 5 + 3;
  const zIndexPaper = ((_b = activity == null ? void 0 : activity.zIndex) != null ? _b : 0) * 5 + 4;
  const transitionState = (_c = activity == null ? void 0 : activity.transitionState) != null ? _c : "enter-done";
  return /* @__PURE__ */ jsx7(
    "div",
    {
      className: container3({
        transitionState: useLazy(transitionState)
      }),
      ref: containerRef,
      style: assignInlineVars5(
        compactMap({
          [globalVars.bottomSheet.borderRadius]: borderRadius,
          [globalVars.backgroundColor]: backgroundColor,
          [globalVars.dimBackgroundColor]: dimBackgroundColor,
          [vars3.zIndexes.dim]: `${zIndexBase}`,
          [vars3.zIndexes.paper]: `${zIndexPaper}`,
          [vars3.transitionDuration]: transitionState === "enter-active" || transitionState === "exit-active" ? globalVars.computedTransitionDuration : "0ms"
        })
      ),
      children: /* @__PURE__ */ jsx7("div", { className: dim3, ref: paperRef, onClick: onDimClick, children: /* @__PURE__ */ jsx7("div", { className: paper3, onClick: onPaperClick, children }) })
    }
  );
};
Modal.displayName = "Modal";
var Modal_default = Modal;
export {
  AppScreen_default as AppScreen,
  BottomSheet_default as BottomSheet,
  IconBack_default as IconBack,
  IconClose_default as IconClose,
  Modal_default as Modal,
  basicUIPlugin,
  globalVars as cssVars,
  useAppScreen
};
//# sourceMappingURL=index.mjs.map
