export declare const vars: import("@vanilla-extract/private").MapLeafNodes<{
    transitionDuration: null;
    zIndexes: {
        dim: null;
        paper: null;
        edge: null;
        appBar: null;
    };
    appBar: {
        center: {
            mainWidth: null;
        };
    };
}, import("@vanilla-extract/private").CSSVarFunction>;
export declare const background: string;
export declare const allTransitions: string;
export declare const enterActive: string;
export declare const enterDone: string;
export declare const exitActive: string;
export declare const exitDone: string;
export declare const appScreen: import("@vanilla-extract/recipes/dist/declarations/src/types").RuntimeFn<{
    transitionState: {
        "enter-active": string;
        "enter-done": string;
        "exit-active": string;
        "exit-done": string;
    };
}>;
export declare const dim: string;
export declare const paper: import("@vanilla-extract/recipes/dist/declarations/src/types").RuntimeFn<{
    hasAppBar: {
        true: (string | {
            transition: `transform var(--${string}), opacity var(--${string}), padding-top var(--${string})` | `transform var(--${string}), opacity var(--${string}), padding-top var(--${string}, ${string})` | `transform var(--${string}), opacity var(--${string}), padding-top var(--${string}, ${number})` | `transform var(--${string}), opacity var(--${string}, ${string}), padding-top var(--${string})` | `transform var(--${string}), opacity var(--${string}, ${string}), padding-top var(--${string}, ${string})` | `transform var(--${string}), opacity var(--${string}, ${string}), padding-top var(--${string}, ${number})` | `transform var(--${string}), opacity var(--${string}, ${number}), padding-top var(--${string})` | `transform var(--${string}), opacity var(--${string}, ${number}), padding-top var(--${string}, ${string})` | `transform var(--${string}), opacity var(--${string}, ${number}), padding-top var(--${string}, ${number})` | `transform var(--${string}, ${string}), opacity var(--${string}), padding-top var(--${string})` | `transform var(--${string}, ${string}), opacity var(--${string}), padding-top var(--${string}, ${string})` | `transform var(--${string}, ${string}), opacity var(--${string}), padding-top var(--${string}, ${number})` | `transform var(--${string}, ${string}), opacity var(--${string}, ${string}), padding-top var(--${string})` | `transform var(--${string}, ${string}), opacity var(--${string}, ${string}), padding-top var(--${string}, ${string})` | `transform var(--${string}, ${string}), opacity var(--${string}, ${string}), padding-top var(--${string}, ${number})` | `transform var(--${string}, ${string}), opacity var(--${string}, ${number}), padding-top var(--${string})` | `transform var(--${string}, ${string}), opacity var(--${string}, ${number}), padding-top var(--${string}, ${string})` | `transform var(--${string}, ${string}), opacity var(--${string}, ${number}), padding-top var(--${string}, ${number})` | `transform var(--${string}, ${number}), opacity var(--${string}), padding-top var(--${string})` | `transform var(--${string}, ${number}), opacity var(--${string}), padding-top var(--${string}, ${string})` | `transform var(--${string}, ${number}), opacity var(--${string}), padding-top var(--${string}, ${number})` | `transform var(--${string}, ${number}), opacity var(--${string}, ${string}), padding-top var(--${string})` | `transform var(--${string}, ${number}), opacity var(--${string}, ${string}), padding-top var(--${string}, ${string})` | `transform var(--${string}, ${number}), opacity var(--${string}, ${string}), padding-top var(--${string}, ${number})` | `transform var(--${string}, ${number}), opacity var(--${string}, ${number}), padding-top var(--${string})` | `transform var(--${string}, ${number}), opacity var(--${string}, ${number}), padding-top var(--${string}, ${string})` | `transform var(--${string}, ${number}), opacity var(--${string}, ${number}), padding-top var(--${string}, ${number})`;
            paddingTop: (`calc(var(--${string}) + constant(safe-area-inset-top))` | `calc(var(--${string}) + env(safe-area-inset-top))`)[];
        })[];
    };
    presentModalFullScreen: {
        true: {
            selectors: {
                [x: string]: {
                    transform: "translate3d(0, 100%, 0)";
                };
            };
        };
    };
}>;
export declare const edge: import("@vanilla-extract/recipes/dist/declarations/src/types").RuntimeFn<{
    hasAppBar: {
        true: {
            top: import("@vanilla-extract/private").CSSVarFunction;
            height: `calc(100% - var(--${string}))` | `calc(100% - var(--${string}, ${string}))` | `calc(100% - var(--${string}, ${number}))`;
        };
    };
}>;
