/// <reference types="react" />
declare const AppBar: import("react").ForwardRefExoticComponent<Partial<Pick<{
    borderColor: string;
    borderSize: string;
    height: string;
    heightTransitionDuration: string;
    minHeight: string;
    iconColor: string;
    textColor: string;
    backgroundColor: string;
    overflow: string;
}, "height" | "backgroundColor" | "borderColor" | "overflow" | "borderSize" | "heightTransitionDuration" | "iconColor" | "textColor">> & {
    title?: React.ReactNode;
    appendLeft?: (() => React.ReactNode) | undefined;
    appendRight?: (() => React.ReactNode) | undefined;
    backButton?: {
        renderIcon?: (() => React.ReactNode) | undefined;
        ariaLabel?: string | undefined;
        onClick?: ((e: React.MouseEvent<HTMLButtonElement>) => void) | undefined;
    } | {
        render?: (() => React.ReactNode) | undefined;
    } | undefined;
    closeButton?: {
        renderIcon?: (() => React.ReactNode) | undefined;
        ariaLabel?: string | undefined;
        onClick?: ((e: React.MouseEvent<HTMLButtonElement>) => void) | undefined;
    } | {
        render?: (() => React.ReactNode) | undefined;
    } | undefined;
    closeButtonLocation?: "left" | "right" | undefined;
    border?: boolean | undefined;
    modalPresentationStyle?: "fullScreen" | undefined;
    onTopClick?: ((e: React.MouseEvent) => void) | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export default AppBar;
