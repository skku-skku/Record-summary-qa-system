{
  "version": 3,
  "sources": ["../src/activity/useActivity.ts", "../src/activity/ActivityProvider.tsx", "../src/utils/isServer.ts", "../src/utils/isBrowser.ts", "../src/utils/makeRef.ts", "../src/utils/noop.ts", "../src/utils/useMemoDeep.ts", "../src/activity/useActivityParams.ts", "../src/stack/useStack.ts", "../src/stack/StackProvider.tsx", "../src/stackflow.tsx", "../src/activity/makeActivityId.ts", "../src/activity/makeStepId.ts", "../src/core/CoreProvider.tsx", "../src/shims/useDeferredValue.ts", "../src/shims/useSyncExternalStore.ts", "../src/shims/useTransition.ts", "../src/core/useCoreActions.ts", "../src/core/useCoreState.ts", "../src/MainRenderer.tsx", "../src/plugins/PluginsProvider.tsx", "../src/plugins/usePlugins.ts", "../src/PluginRenderer.tsx", "../src/useActions.ts", "../src/useStepActions.ts", "../src/useActiveEffect.ts", "../src/useEnterDoneEffect.ts", "../src/useStep.ts"],
  "sourcesContent": ["import { useContext } from \"react\";\n\nimport { ActivityContext } from \"./ActivityProvider\";\n\n/**\n * Get current activity state\n */\nexport const useActivity = () => useContext(ActivityContext);\n", "import type { Activity } from \"@stackflow/core\";\nimport React, { createContext } from \"react\";\n\nimport { useMemoDeep } from \"../utils\";\n\nexport const ActivityContext = createContext<Activity>(null as any);\n\ninterface ActivityProviderProps {\n  children: React.ReactNode;\n  value: Activity;\n}\nexport const ActivityProvider: React.FC<ActivityProviderProps> = ({\n  children,\n  value,\n}) => (\n  <ActivityContext.Provider value={useMemoDeep(value)}>\n    {children}\n  </ActivityContext.Provider>\n);\n\nActivityProvider.displayName = \"ActivityProvider\";\n", "/**\n * @description\n * \uD604\uC7AC JS \uB7F0\uD0C0\uC784\uC774 \uC11C\uBC84 \uD658\uACBD\uC778\uC9C0 \uD655\uC778\uD574\uC694.\n */\nexport function isServer() {\n  return typeof window === \"undefined\";\n}\n", "import { isServer } from \"./isServer\";\n\n/**\n * @description\n * \uD604\uC7AC JS \uB7F0\uD0C0\uC784\uC774 \uBE0C\uB77C\uC6B0\uC800 \uD658\uACBD\uC778\uC9C0 \uD655\uC778\uD574\uC694.\n */\nexport function isBrowser() {\n  return !isServer();\n}\n", "export function makeRef<T>(): [() => T | null, (value: T) => void] {\n  const ref: {\n    value: T | null;\n  } = {\n    value: null,\n  };\n  function get() {\n    return ref.value;\n  }\n  function set(value: T) {\n    ref.value = value;\n  }\n\n  return [get, set];\n}\n", "export const noop = () => {};\n", "import { useEffect, useRef } from \"react\";\nimport compare from \"react-fast-compare\";\n\nexport function useMemoDeep<T>(next: T) {\n  const previousRef = useRef(next);\n  const previous = previousRef.current;\n  const isEqual = compare(previous, next);\n\n  useEffect(() => {\n    if (!isEqual) {\n      previousRef.current = next;\n    }\n  });\n\n  return isEqual ? previous : next;\n}\n", "import { useContext } from \"react\";\n\nimport { ActivityContext } from \"./ActivityProvider\";\n\n/**\n * Get current activity parameters\n */\nexport function useActivityParams<\n  T extends { [key in keyof T]: string | undefined },\n>(): T {\n  return useContext(ActivityContext).params as T;\n}\n", "import { useContext } from \"react\";\n\nimport { StackContext } from \"./StackProvider\";\n\n/**\n * Get overall stack state\n */\nexport const useStack = () => useContext(StackContext);\n", "import type { Stack } from \"@stackflow/core\";\nimport { createContext } from \"react\";\n\nimport { useMemoDeep } from \"../utils\";\n\nexport const StackContext = createContext<Stack>(null as any);\n\ninterface StackProviderProps {\n  children: React.ReactNode;\n  value: Stack;\n}\nexport const StackProvider: React.FC<StackProviderProps> = ({\n  children,\n  value,\n}) => (\n  <StackContext.Provider value={useMemoDeep(value)}>\n    {children}\n  </StackContext.Provider>\n);\n\nStackProvider.displayName = \"StackProvider\";\n", "import type {\n  ActivityRegisteredEvent,\n  CoreStore,\n  PushedEvent,\n  StackflowActions,\n  StepPushedEvent,\n} from \"@stackflow/core\";\nimport { makeCoreStore, makeEvent } from \"@stackflow/core\";\nimport { memo, useMemo } from \"react\";\n\nimport type { ActivityComponentType } from \"./activity\";\nimport { makeActivityId, makeStepId } from \"./activity\";\nimport type { BaseActivities } from \"./BaseActivities\";\nimport { CoreProvider } from \"./core\";\nimport MainRenderer from \"./MainRenderer\";\nimport { PluginsProvider } from \"./plugins\";\nimport type { StackflowReactPlugin } from \"./StackflowReactPlugin\";\nimport type { UseActionsOutputType } from \"./useActions\";\nimport { useActions } from \"./useActions\";\nimport type {\n  UseStepActions,\n  UseStepActionsOutputType,\n} from \"./useStepActions\";\nimport { useStepActions } from \"./useStepActions\";\nimport { isBrowser, makeRef } from \"./utils\";\n\nfunction parseActionOptions(options?: { animate?: boolean }) {\n  if (!options) {\n    return { skipActiveState: false };\n  }\n\n  const isNullableAnimateOption =\n    options.animate === undefined || options.animate == null;\n  if (isNullableAnimateOption) {\n    return { skipActiveState: false };\n  }\n\n  return { skipActiveState: !options.animate };\n}\n\nexport type StackComponentType = React.FC<{\n  initialContext?: any;\n}>;\n\ntype StackflowPluginsEntry<T extends BaseActivities> =\n  | StackflowReactPlugin<T>\n  | StackflowPluginsEntry<T>[];\n\nexport type StackflowOptions<T extends BaseActivities> = {\n  /**\n   * Register activities used in your app\n   */\n  activities: T;\n\n  /**\n   * Transition duration for stack animation (millisecond)\n   */\n  transitionDuration: number;\n\n  /**\n   * Set the first activity to load at the bottom\n   * (It can be overwritten by plugin)\n   */\n  initialActivity?: () => Extract<keyof T, string>;\n\n  /**\n   * Inject stackflow plugins\n   */\n  plugins?: Array<StackflowPluginsEntry<T>>;\n};\n\nexport type StackflowOutput<T extends BaseActivities> = {\n  /**\n   * Return activities\n   */\n  activities: T;\n\n  /**\n   * Created `<Stack />` component\n   */\n  Stack: StackComponentType;\n\n  /**\n   * Created `useFlow()` hooks\n   */\n  useFlow: () => UseActionsOutputType<T>;\n\n  /**\n   * Created `useStepFlow()` hooks\n   */\n  useStepFlow: UseStepActions<T>;\n\n  /**\n   * Add activity imperatively\n   */\n  addActivity: (options: {\n    name: string;\n    component: ActivityComponentType<any>;\n    paramsSchema?: ActivityRegisteredEvent[\"activityParamsSchema\"];\n  }) => void;\n\n  /**\n   * Add plugin imperatively\n   */\n  addPlugin: (plugin: StackflowPluginsEntry<T>) => void;\n\n  /**\n   * Created action triggers\n   */\n  actions: Pick<StackflowActions, \"dispatchEvent\" | \"getStack\"> &\n    Pick<UseActionsOutputType<T>, \"push\" | \"pop\" | \"replace\"> &\n    Pick<UseStepActionsOutputType<{}>, \"stepPush\" | \"stepReplace\" | \"stepPop\">;\n};\n\n/**\n * Make `<Stack />` component and `useFlow()` hooks that strictly typed with `activities`\n */\nexport function stackflow<T extends BaseActivities>(\n  options: StackflowOptions<T>,\n): StackflowOutput<T> {\n  const plugins = (options.plugins ?? [])\n    .flat(Infinity as 0)\n    .map((p) => p as StackflowReactPlugin<T>);\n  const pluginInstances = plugins.map((plugin) => plugin());\n\n  const activityComponentMap = Object.entries(options.activities).reduce(\n    (acc, [key, Activity]) => ({\n      ...acc,\n      [key]:\n        \"component\" in Activity ? memo(Activity.component) : memo(Activity),\n    }),\n    {} as {\n      [key: string]: ActivityComponentType;\n    },\n  );\n\n  const enoughPastTime = () =>\n    new Date().getTime() - options.transitionDuration * 2;\n\n  const staticCoreStore = makeCoreStore({\n    initialEvents: [\n      makeEvent(\"Initialized\", {\n        transitionDuration: options.transitionDuration,\n        eventDate: enoughPastTime(),\n      }),\n      ...Object.entries(options.activities).map(([activityName, Activity]) =>\n        makeEvent(\"ActivityRegistered\", {\n          activityName,\n          eventDate: enoughPastTime(),\n          ...(\"component\" in Activity\n            ? {\n                activityParamsSchema: Activity.paramsSchema,\n              }\n            : null),\n        }),\n      ),\n    ],\n    plugins: [],\n  });\n\n  const [getCoreStore, setCoreStore] = makeRef<CoreStore>();\n\n  const Stack: StackComponentType = memo((props) => {\n    const coreStore = useMemo(() => {\n      const prevCoreStore = getCoreStore();\n\n      // In a browser environment,\n      // memoize `coreStore` so that only one `coreStore` exists throughout the entire app.\n      if (isBrowser() && prevCoreStore) {\n        return prevCoreStore;\n      }\n\n      const initialPushedEventsByOption = options.initialActivity\n        ? [\n            makeEvent(\"Pushed\", {\n              activityId: makeActivityId(),\n              activityName: options.initialActivity(),\n              activityParams: {},\n              eventDate: enoughPastTime(),\n              skipEnterActiveState: false,\n            }),\n          ]\n        : [];\n\n      const initialPushedEvents = pluginInstances.reduce<\n        (PushedEvent | StepPushedEvent)[]\n      >(\n        (initialEvents, pluginInstance) =>\n          pluginInstance.overrideInitialEvents?.({\n            initialEvents,\n            initialContext: props.initialContext ?? {},\n          }) ?? initialEvents,\n        initialPushedEventsByOption,\n      );\n\n      const isInitialActivityIgnored =\n        initialPushedEvents.length > 0 &&\n        initialPushedEventsByOption.length > 0 &&\n        initialPushedEvents !== initialPushedEventsByOption;\n\n      if (isInitialActivityIgnored) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Stackflow -` +\n            ` Some plugin overrides an \"initialActivity\" option.` +\n            ` The \"initialActivity\" option you set to \"${initialPushedEventsByOption[0].activityName}\" in the \"stackflow\" is ignored.`,\n        );\n      }\n\n      if (initialPushedEvents.length === 0) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Stackflow -` +\n            ` There is no initial activity.` +\n            \" If you want to set the initial activity,\" +\n            \" add the `initialActivity` option of the `stackflow()` function or\" +\n            \" add a plugin that sets the initial activity. (e.g. `@stackflow/plugin-history-sync`)\",\n        );\n      }\n\n      const store = makeCoreStore({\n        initialEvents: [\n          ...staticCoreStore.pullEvents(),\n          ...initialPushedEvents,\n        ],\n        plugins,\n      });\n\n      if (isBrowser()) {\n        store.init();\n        setCoreStore(store);\n      }\n\n      return store;\n    }, []);\n\n    return (\n      <PluginsProvider value={pluginInstances}>\n        <CoreProvider coreStore={coreStore}>\n          <MainRenderer\n            activityComponentMap={activityComponentMap}\n            initialContext={props.initialContext}\n          />\n        </CoreProvider>\n      </PluginsProvider>\n    );\n  });\n\n  Stack.displayName = \"Stack\";\n\n  return {\n    activities: options.activities,\n    Stack,\n    useFlow: useActions,\n    useStepFlow: useStepActions,\n    addActivity(activity) {\n      if (getCoreStore()) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Stackflow -` +\n            \" `addActivity()` API cannot be called after a `<Stack />` component has been rendered\",\n        );\n\n        return;\n      }\n\n      activityComponentMap[activity.name] = memo(activity.component);\n\n      staticCoreStore.actions.dispatchEvent(\"ActivityRegistered\", {\n        activityName: activity.name,\n        activityParamsSchema: activity.paramsSchema,\n        eventDate: enoughPastTime(),\n      });\n    },\n    addPlugin(plugin) {\n      if (getCoreStore()) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Stackflow -` +\n            \" `addPlugin()` API cannot be called after a `<Stack />` component has been rendered\",\n        );\n\n        return;\n      }\n\n      [plugin]\n        .flat(Infinity as 0)\n        .map((p) => p as StackflowReactPlugin<T>)\n        .forEach((p) => {\n          plugins.push(p);\n          pluginInstances.push(p());\n        });\n    },\n    actions: {\n      getStack() {\n        return (\n          getCoreStore()?.actions.getStack() ??\n          staticCoreStore.actions.getStack()\n        );\n      },\n      dispatchEvent(name, parameters) {\n        return getCoreStore()?.actions.dispatchEvent(name, parameters);\n      },\n      push(activityName, activityParams, options) {\n        const activityId = makeActivityId();\n\n        getCoreStore()?.actions.push({\n          activityId,\n          activityName,\n          activityParams,\n          skipEnterActiveState: parseActionOptions(options).skipActiveState,\n        });\n\n        return {\n          activityId,\n        };\n      },\n      replace(activityName, activityParams, options) {\n        const activityId = options?.activityId ?? makeActivityId();\n\n        getCoreStore()?.actions.replace({\n          activityId: options?.activityId ?? makeActivityId(),\n          activityName,\n          activityParams,\n          skipEnterActiveState: parseActionOptions(options).skipActiveState,\n        });\n\n        return {\n          activityId,\n        };\n      },\n      pop(\n        count?: number | { animate?: boolean } | undefined,\n        options?: { animate?: boolean } | undefined,\n      ) {\n        let _count = 1;\n        let _options: { animate?: boolean } = {};\n\n        if (typeof count === \"object\") {\n          _options = {\n            ...count,\n          };\n        }\n        if (typeof count === \"number\") {\n          _count = count;\n        }\n        if (options) {\n          _options = {\n            ...options,\n          };\n        }\n\n        for (let i = 0; i < _count; i += 1) {\n          getCoreStore()?.actions.pop({\n            skipExitActiveState:\n              i === 0 ? parseActionOptions(_options).skipActiveState : true,\n          });\n        }\n      },\n      stepPush(params) {\n        const stepId = makeStepId();\n\n        return getCoreStore()?.actions.stepPush({\n          stepId,\n          stepParams: params,\n        });\n      },\n      stepReplace(params) {\n        const stepId = makeStepId();\n\n        return getCoreStore()?.actions.stepReplace({\n          stepId,\n          stepParams: params,\n        });\n      },\n      stepPop() {\n        return getCoreStore()?.actions.stepPop({});\n      },\n    },\n  };\n}\n", "import { id } from \"@stackflow/core\";\n\nexport function makeActivityId() {\n  return id();\n}\n", "import { id } from \"@stackflow/core\";\n\nexport function makeStepId() {\n  return id();\n}\n", "import type { CoreStore, Stack } from \"@stackflow/core\";\nimport { createContext } from \"react\";\n\nimport { useDeferredValue, useSyncExternalStore } from \"../shims\";\n\nexport const CoreActionsContext = createContext<CoreStore[\"actions\"]>(\n  null as any,\n);\nexport const CoreStateContext = createContext<Stack>(null as any);\n\nexport interface CoreProviderProps {\n  coreStore: CoreStore;\n  children: React.ReactNode;\n}\nexport const CoreProvider: React.FC<CoreProviderProps> = ({\n  coreStore,\n  children,\n}) => {\n  const stack = useSyncExternalStore(\n    coreStore.subscribe,\n    coreStore.actions.getStack,\n    coreStore.actions.getStack,\n  );\n\n  const deferredStack = useDeferredValue(stack);\n\n  return (\n    <CoreStateContext.Provider value={deferredStack}>\n      <CoreActionsContext.Provider value={coreStore.actions}>\n        {children}\n      </CoreActionsContext.Provider>\n    </CoreStateContext.Provider>\n  );\n};\n\nCoreProvider.displayName = \"CoreProvider\";\n", "import React from \"react\";\n\nexport const useDeferredValue: typeof React.useDeferredValue =\n  React.useDeferredValue ?? ((value) => value);\n", "import React, { useEffect, useState } from \"react\";\n\nexport const useSyncExternalStore: typeof React.useSyncExternalStore =\n  React.useSyncExternalStore ??\n  ((subscribe, getSnapshot) => {\n    const [state, setState] = useState(() => getSnapshot());\n\n    useEffect(() => {\n      const dispose = subscribe(() => {\n        setState(() => getSnapshot());\n      });\n\n      return dispose;\n    });\n\n    return state;\n  });\n", "import React from \"react\";\n\nexport const useTransition: typeof React.useTransition =\n  React.useTransition ?? (() => [false, (cb: () => void) => cb()]);\n", "import { useContext } from \"react\";\n\nimport { CoreActionsContext } from \"./CoreProvider\";\n\nexport const useCoreActions = () => useContext(CoreActionsContext);\n", "import { useContext } from \"react\";\n\nimport { CoreStateContext } from \"./CoreProvider\";\n\nexport const useCoreState = () => useContext(CoreStateContext);\n", "import { useEffect } from \"react\";\n\nimport type { ActivityComponentType } from \"./activity\";\nimport { useCoreState } from \"./core\";\nimport PluginRenderer from \"./PluginRenderer\";\nimport { usePlugins } from \"./plugins\";\nimport type { WithRequired } from \"./utils\";\n\ninterface MainRendererProps {\n  activityComponentMap: {\n    [key: string]: ActivityComponentType;\n  };\n  initialContext: any;\n}\nconst MainRenderer: React.FC<MainRendererProps> = ({\n  activityComponentMap,\n  initialContext,\n}) => {\n  const coreState = useCoreState();\n  const plugins = usePlugins();\n\n  const renderingPlugins = plugins.filter(\n    (plugin): plugin is WithRequired<typeof plugin, \"render\"> =>\n      !!plugin.render,\n  );\n\n  useEffect(() => {\n    if (renderingPlugins.length === 0) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Stackflow -` +\n          ` There is no rendering plugin, so \"<Stack />\" doesn't render anything.` +\n          ` If you want to render some UI, use \"@stackflow/plugin-renderer-basic\"` +\n          ` or add another rendering plugin.`,\n      );\n    }\n  }, [renderingPlugins]);\n\n  let output = (\n    <>\n      {renderingPlugins.map((plugin) => (\n        <PluginRenderer\n          key={plugin.key}\n          activityComponentMap={activityComponentMap}\n          plugin={plugin}\n          initialContext={initialContext}\n        />\n      ))}\n    </>\n  );\n\n  plugins.forEach((plugin) => {\n    output =\n      plugin.wrapStack?.({\n        stack: {\n          ...coreState,\n          render() {\n            return output;\n          },\n        },\n        initialContext,\n      }) ?? output;\n  });\n\n  return output;\n};\n\nMainRenderer.displayName = \"MainRenderer\";\n\nexport default MainRenderer;\n", "import React, { createContext } from \"react\";\n\nimport type { StackflowReactPlugin } from \"../StackflowReactPlugin\";\n\nexport type PluginsContextValue = Array<ReturnType<StackflowReactPlugin>>;\nexport const PluginsContext = createContext<PluginsContextValue>(null as any);\n\ninterface PluginsProviderProps {\n  children: React.ReactNode;\n  value: PluginsContextValue;\n}\nexport const PluginsProvider: React.FC<PluginsProviderProps> = ({\n  children,\n  value,\n}) => (\n  <PluginsContext.Provider value={value}>{children}</PluginsContext.Provider>\n);\n\nPluginsProvider.displayName = \"PluginsProvider\";\n", "import { useContext } from \"react\";\n\nimport { PluginsContext } from \"./PluginsProvider\";\n\nexport function usePlugins() {\n  return useContext(PluginsContext);\n}\n", "import type { ActivityComponentType } from \"./activity\";\nimport { ActivityProvider } from \"./activity\";\nimport { useCoreState } from \"./core\";\nimport { usePlugins } from \"./plugins\";\nimport { StackProvider } from \"./stack\";\nimport type { StackflowReactPlugin } from \"./StackflowReactPlugin\";\nimport type { WithRequired } from \"./utils\";\n\ninterface PluginRendererProps {\n  activityComponentMap: {\n    [key: string]: ActivityComponentType;\n  };\n  plugin: WithRequired<ReturnType<StackflowReactPlugin>, \"render\">;\n  initialContext: any;\n}\nconst PluginRenderer: React.FC<PluginRendererProps> = ({\n  activityComponentMap,\n  plugin,\n  initialContext,\n}) => {\n  const coreState = useCoreState();\n  const plugins = usePlugins();\n\n  return plugin.render({\n    stack: {\n      ...coreState,\n      render(overrideStack) {\n        const stack = {\n          ...coreState,\n          ...overrideStack,\n        };\n\n        return {\n          activities: stack.activities.map((activity) => ({\n            ...activity,\n            key: activity.id,\n            render(overrideActivity) {\n              const Activity = activityComponentMap[activity.name];\n\n              let output: React.ReactNode = (\n                <Activity params={activity.params} />\n              );\n\n              plugins.forEach((p) => {\n                output =\n                  p.wrapActivity?.({\n                    activity: {\n                      ...activity,\n                      render: () => output,\n                    },\n                    initialContext,\n                  }) ?? output;\n              });\n\n              return (\n                <StackProvider value={stack}>\n                  <ActivityProvider\n                    key={activity.id}\n                    value={{\n                      ...activity,\n                      ...overrideActivity,\n                    }}\n                  >\n                    {output}\n                  </ActivityProvider>\n                </StackProvider>\n              );\n            },\n          })),\n        };\n      },\n    },\n    initialContext,\n  });\n};\n\nPluginRenderer.displayName = \"PluginRenderer\";\n\nexport default PluginRenderer;\n", "import { useMemo } from \"react\";\n\nimport type { ActivityComponentType } from \"./activity\";\nimport { makeActivityId } from \"./activity\";\nimport type { BaseActivities } from \"./BaseActivities\";\nimport { useCoreActions } from \"./core\";\nimport { useTransition } from \"./shims\";\n\nfunction parseActionOptions(options?: { animate?: boolean }) {\n  if (!options) {\n    return { skipActiveState: false };\n  }\n\n  const isNullableAnimateOption =\n    options.animate === undefined || options.animate == null;\n  if (isNullableAnimateOption) {\n    return { skipActiveState: false };\n  }\n\n  return { skipActiveState: !options.animate };\n}\n\nexport type UseActionsOutputType<T extends BaseActivities> = {\n  /**\n   * Is transition pending\n   */\n  pending: boolean;\n\n  /**\n   * Push new activity\n   */\n  push<K extends Extract<keyof T, string>>(\n    activityName: K,\n    params: T[K] extends\n      | ActivityComponentType<infer U>\n      | { component: ActivityComponentType<infer U> }\n      ? U\n      : {},\n    options?: {\n      animate?: boolean;\n    },\n  ): {\n    activityId: string;\n  };\n\n  /**\n   * Push new activity in the top and remove current top activity when new activity is activated\n   */\n  replace<K extends Extract<keyof T, string>>(\n    activityName: K,\n    params: T[K] extends\n      | ActivityComponentType<infer U>\n      | { component: ActivityComponentType<infer U> }\n      ? U\n      : {},\n    options?: {\n      animate?: boolean;\n      activityId?: string;\n    },\n  ): {\n    activityId: string;\n  };\n\n  /**\n   * Remove top activity\n   */\n  pop(): void;\n  pop(options: { animate?: boolean }): void;\n  pop(count: number, options?: { animate?: boolean }): void;\n};\n\nexport function useActions<\n  T extends BaseActivities,\n>(): UseActionsOutputType<T> {\n  const coreActions = useCoreActions();\n  const [pending] = useTransition();\n\n  return useMemo(\n    () => ({\n      pending,\n      push(activityName, activityParams, options) {\n        const activityId = makeActivityId();\n\n        coreActions?.push({\n          activityId,\n          activityName,\n          activityParams,\n          skipEnterActiveState: parseActionOptions(options).skipActiveState,\n        });\n\n        return {\n          activityId,\n        };\n      },\n      replace(activityName, activityParams, options) {\n        const activityId = makeActivityId();\n\n        coreActions?.replace({\n          activityId: options?.activityId ?? makeActivityId(),\n          activityName,\n          activityParams,\n          skipEnterActiveState: parseActionOptions(options).skipActiveState,\n        });\n\n        return {\n          activityId,\n        };\n      },\n      pop(\n        count?: number | { animate?: boolean } | undefined,\n        options?: { animate?: boolean } | undefined,\n      ) {\n        let _count = 1;\n        let _options: { animate?: boolean } = {};\n\n        if (typeof count === \"object\") {\n          _options = {\n            ...count,\n          };\n        }\n        if (typeof count === \"number\") {\n          _count = count;\n        }\n        if (options) {\n          _options = {\n            ...options,\n          };\n        }\n\n        for (let i = 0; i < _count; i += 1) {\n          coreActions?.pop({\n            skipExitActiveState:\n              i === 0 ? parseActionOptions(_options).skipActiveState : true,\n          });\n        }\n      },\n    }),\n    [coreActions?.push, coreActions?.replace, coreActions?.pop, pending],\n  );\n}\n", "import { useMemo } from \"react\";\n\nimport type { ActivityComponentType } from \"./activity\";\nimport { makeStepId } from \"./activity\";\nimport type { BaseActivities } from \"./BaseActivities\";\nimport { useCoreActions } from \"./core\";\nimport { useTransition } from \"./shims\";\n\nexport type UseStepActionsOutputType<P> = {\n  pending: boolean;\n  stepPush: (params: P, options?: {}) => void;\n  stepReplace: (params: P, options?: {}) => void;\n  stepPop: (options?: {}) => void;\n};\n\nexport type UseStepActions<T extends BaseActivities = {}> = <\n  K extends Extract<keyof T, string>,\n>(\n  activityName: K,\n) => UseStepActionsOutputType<\n  T[K] extends\n    | ActivityComponentType<infer U>\n    | { component: ActivityComponentType<infer U> }\n    ? U\n    : {}\n>;\n\nexport const useStepActions: UseStepActions = () => {\n  const coreActions = useCoreActions();\n  const [pending] = useTransition();\n\n  return useMemo(\n    () => ({\n      pending,\n      stepPush(params) {\n        const stepId = makeStepId();\n\n        coreActions?.stepPush({\n          stepId,\n          stepParams: params,\n        });\n      },\n      stepReplace(params) {\n        const stepId = makeStepId();\n\n        coreActions?.stepReplace({\n          stepId,\n          stepParams: params,\n        });\n      },\n      stepPop() {\n        coreActions?.stepPop({});\n      },\n    }),\n    [\n      coreActions?.stepPush,\n      coreActions?.stepReplace,\n      coreActions?.stepPop,\n      pending,\n    ],\n  );\n};\n", "import { useEffect } from \"react\";\n\nimport { useActivity } from \"./activity/useActivity\";\nimport { noop } from \"./utils\";\n\nexport const useActiveEffect = (effect: React.EffectCallback) => {\n  const { isActive } = useActivity();\n\n  useEffect(() => {\n    if (isActive) {\n      return effect();\n    }\n\n    return noop;\n  }, [isActive]);\n};\n", "import { useEffect } from \"react\";\n\nimport { useActivity } from \"./activity/useActivity\";\nimport { noop } from \"./utils\";\n\nexport const useEnterDoneEffect = (\n  effect: React.EffectCallback,\n  deps: React.DependencyList = [],\n) => {\n  const { isTop, transitionState } = useActivity();\n\n  useEffect(() => {\n    if (isTop && transitionState === \"enter-done\") {\n      return effect();\n    }\n\n    return noop;\n  }, [isTop, transitionState, ...deps]);\n};\n", "import type { ActivityStep } from \"@stackflow/core\";\nimport { useContext } from \"react\";\n\nimport { ActivityContext } from \"./activity/ActivityProvider\";\n\n/**\n * Get current step\n */\nexport function useStep(): ActivityStep | null {\n  const { steps, id } = useContext(ActivityContext);\n\n  return steps.filter((step) => step.id !== id).at(-1) ?? null;\n}\n"],
  "mappings": "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",
  "names": ["useContext", "useContext", "useContext", "createContext", "jsx", "createContext", "useContext", "useMemo", "id", "createContext", "React", "React", "useEffect", "_a", "React", "_a", "jsx", "createContext", "useContext", "useContext", "useContext", "useContext", "useEffect", "createContext", "jsx", "useContext", "useContext", "jsx", "_a", "jsx", "useEffect", "_a", "_a", "useMemo", "useMemo", "jsx", "parseActionOptions", "_a", "useMemo", "options", "useEffect", "useEffect", "useEffect", "useEffect", "useContext", "_a", "id", "useContext"]
}
