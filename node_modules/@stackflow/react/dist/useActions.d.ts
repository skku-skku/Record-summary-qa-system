import type { ActivityComponentType } from "./activity";
import type { BaseActivities } from "./BaseActivities";
export declare type UseActionsOutputType<T extends BaseActivities> = {
    /**
     * Is transition pending
     */
    pending: boolean;
    /**
     * Push new activity
     */
    push<K extends Extract<keyof T, string>>(activityName: K, params: T[K] extends ActivityComponentType<infer U> | {
        component: ActivityComponentType<infer U>;
    } ? U : {}, options?: {
        animate?: boolean;
    }): {
        activityId: string;
    };
    /**
     * Push new activity in the top and remove current top activity when new activity is activated
     */
    replace<K extends Extract<keyof T, string>>(activityName: K, params: T[K] extends ActivityComponentType<infer U> | {
        component: ActivityComponentType<infer U>;
    } ? U : {}, options?: {
        animate?: boolean;
        activityId?: string;
    }): {
        activityId: string;
    };
    /**
     * Remove top activity
     */
    pop(): void;
    pop(options: {
        animate?: boolean;
    }): void;
    pop(count: number, options?: {
        animate?: boolean;
    }): void;
};
export declare function useActions<T extends BaseActivities>(): UseActionsOutputType<T>;
