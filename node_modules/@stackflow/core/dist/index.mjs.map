{
  "version": 3,
  "sources": ["../src/utils/compareBy.ts", "../src/utils/findIndices.ts", "../src/utils/time.ts", "../src/utils/id.ts", "../src/utils/last.ts", "../src/utils/omit.ts", "../src/utils/once.ts", "../src/utils/uniqBy.ts", "../src/activity-utils/findTargetActivityIndexes.ts", "../src/activity-utils/createActivityFromEvent.ts", "../src/activity-utils/createReducer.ts", "../src/activity-utils/findNewActivityIndex.ts", "../src/activity-utils/makeActivitiesReducers.ts", "../src/activity-utils/makeActivityReducers.ts", "../src/event-utils/filterEvents.ts", "../src/event-utils/makeEvent.ts", "../src/event-utils/validateEvents.ts", "../src/aggregate.ts", "../src/makeCoreStore.ts", "../src/produceEffects.ts"],
  "sourcesContent": ["export function compareBy<T>(a: T, b: T, selector: (element: T) => string) {\n  const $a = selector(a);\n  const $b = selector(b);\n\n  if ($a < $b) {\n    return -1;\n  }\n  if ($a === $b) {\n    return 0;\n  }\n  return 1;\n}\n", "export function findIndices<T>(arr: T[], compare: (t: T) => boolean) {\n  return arr\n    .map((e, i) => (compare(e) ? i : undefined))\n    .filter((output): output is number => typeof output === \"number\");\n}\n", "let dt = 0;\nlet memt = 0;\n\nexport const time = () => {\n  const t = new Date().getTime();\n\n  if (memt === t) {\n    dt += 1;\n  } else {\n    memt = t;\n    dt = 0;\n  }\n\n  return (t * 1000 + dt) / 1000;\n};\n", "import { time } from \"./time\";\n\nexport function id() {\n  return (time() * 1000).toString(16);\n}\n", "export function last<T>(arr: T[]) {\n  return arr.length === 0 ? undefined : arr[arr.length - 1];\n}\n", "export function omit<T extends {}, K extends keyof T>(\n  obj: T,\n  fields: K[],\n): Omit<T, K> {\n  const output = {\n    ...obj,\n  };\n\n  fields.forEach((field) => {\n    delete output[field];\n  });\n\n  return output;\n}\n", "export function once(cb: () => void) {\n  let called = false;\n\n  return () => {\n    if (called) {\n      return;\n    }\n    called = true;\n\n    cb();\n  };\n}\n", "export function uniqBy<T>(arr: T[], by: (item: T) => string | null): T[] {\n  const valueMap = new Map<string, true>();\n\n  return [...arr]\n    .reverse()\n    .filter((item) => {\n      const key = by(item);\n\n      if (key === null) {\n        return true;\n      }\n\n      const exists = !!valueMap.get(key);\n      valueMap.set(key, true);\n\n      return !exists;\n    })\n    .reverse();\n}\n", "import type { DomainEvent } from \"../event-types\";\nimport type { Activity, ActivityTransitionState } from \"../Stack\";\nimport { findIndices, last } from \"../utils\";\n\nfunction isActivityNotExited(activity: Activity) {\n  return !activity.exitedBy;\n}\n\nfunction compareActivitiesByEventDate(a1: Activity, a2: Activity) {\n  return a2.enteredBy.eventDate - a1.enteredBy.eventDate;\n}\n\nfunction findLatestActiveActivity(activities: Activity[]) {\n  return activities\n    .filter(isActivityNotExited)\n    .sort(compareActivitiesByEventDate)[0];\n}\n\nexport default function findTargetActivityIndexes(\n  activities: Activity[],\n  event: DomainEvent,\n  isTransitionDone: boolean,\n): number[] {\n  const targetActivities: number[] = [];\n\n  switch (event.name) {\n    case \"Replaced\": {\n      const alreadyExistingActivityIndex = last(\n        findIndices(activities, (activity) => activity.id === event.activityId),\n      );\n\n      if (alreadyExistingActivityIndex !== undefined) {\n        break;\n      }\n\n      const sorted = activities\n        .slice()\n        .sort(compareActivitiesByEventDate)\n        .filter(isActivityNotExited);\n\n      const transitionState: ActivityTransitionState =\n        event.skipEnterActiveState || isTransitionDone\n          ? \"enter-done\"\n          : \"enter-active\";\n\n      if (transitionState === \"enter-done\") {\n        const range = sorted.findIndex(\n          (activity) =>\n            !(\n              event.skipEnterActiveState &&\n              activity.enteredBy.name === \"Replaced\" &&\n              activity.transitionState === \"enter-active\"\n            ),\n        );\n\n        return sorted.slice(0, range + 1).map((a) => activities.indexOf(a));\n      }\n      break;\n    }\n    case \"Popped\": {\n      const latestActivity = findLatestActiveActivity(activities.slice(1));\n\n      if (latestActivity) {\n        targetActivities.push(activities.indexOf(latestActivity));\n      }\n      break;\n    }\n    case \"StepPushed\":\n    case \"StepReplaced\": {\n      const latestActivity = findLatestActiveActivity(activities);\n\n      if (latestActivity) {\n        targetActivities.push(activities.indexOf(latestActivity));\n      }\n      break;\n    }\n    case \"StepPopped\": {\n      const latestActivity = findLatestActiveActivity(activities);\n\n      if (latestActivity && latestActivity.steps.length > 1) {\n        targetActivities.push(activities.indexOf(latestActivity));\n      }\n\n      break;\n    }\n    default:\n      break;\n  }\n  return targetActivities;\n}\n", "import type { PushedEvent, ReplacedEvent } from \"../event-types\";\nimport type { Activity, ActivityTransitionState } from \"../Stack\";\n\nexport const createActivityFromEvent = (\n  event: PushedEvent | ReplacedEvent,\n  transitionState: ActivityTransitionState,\n): Activity => ({\n  id: event.activityId,\n  name: event.activityName,\n  transitionState,\n  params: event.activityParams,\n  context: event.activityContext,\n  steps: [\n    {\n      id: event.activityId,\n      params: event.activityParams,\n      enteredBy: event,\n    },\n  ],\n  enteredBy: event,\n  isTop: false,\n  isActive: false,\n  isRoot: false,\n  zIndex: -1,\n});\n", "import type { Activity, DomainEvent } from \"..\";\n\ntype Reducer<T> = (state: T, event: DomainEvent) => T;\n\nexport function createReducer<T>(reducerMap: {\n  [key in DomainEvent[\"name\"]]: (\n    state: T,\n    event: Extract<DomainEvent, { name: key }>,\n  ) => T;\n}) {\n  return (activity: T, event: DomainEvent) => {\n    const reducer = reducerMap[event.name] as Reducer<T>;\n    if (reducer) {\n      return reducer(activity, event);\n    }\n    throw new Error(`No reducer for event ${JSON.stringify(event)}`);\n  };\n}\n", "import type { PushedEvent, ReplacedEvent } from \"../event-types\";\nimport type { Activity } from \"../Stack\";\nimport { findIndices, last } from \"../utils\";\n\nexport default function findNewActivityIndex(\n  event: PushedEvent | ReplacedEvent,\n  activities: Activity[],\n) {\n  switch (event.name) {\n    case \"Pushed\":\n      return activities.length;\n    case \"Replaced\": {\n      const alreadyExistingActivityIndex = last(\n        findIndices(activities, (activity) => activity.id === event.activityId),\n      );\n      return alreadyExistingActivityIndex ?? activities.length;\n    }\n    default:\n      return -1;\n  }\n}\n", "import type {\n  ActivityRegisteredEvent,\n  DomainEvent,\n  InitializedEvent,\n  PoppedEvent,\n  PushedEvent,\n  ReplacedEvent,\n  StepPoppedEvent,\n  StepPushedEvent,\n  StepReplacedEvent,\n} from \"../event-types\";\nimport type { Activity, ActivityTransitionState } from \"../Stack\";\nimport { createActivityFromEvent } from \"./createActivityFromEvent\";\nimport { createReducer } from \"./createReducer\";\nimport findNewActivityIndex from \"./findNewActivityIndex\";\n\n/**\n * Create activity list reducers for each event type (Activity[] + Event => Activity[])\n */\nexport const makeActivitiesReducers = (isTransitionDone: boolean) =>\n  createReducer({\n    /**\n     * noop\n     */\n    Initialized: (\n      activities: Activity[],\n      event: InitializedEvent,\n    ): Activity[] => activities,\n    /**\n     * noop\n     */\n    ActivityRegistered: (\n      activities: Activity[],\n      event: ActivityRegisteredEvent,\n    ): Activity[] => activities,\n    /**\n     * Push new activity to activities\n     */\n    Pushed: (activities: Activity[], event: PushedEvent): Activity[] => {\n      const transitionState: ActivityTransitionState =\n        event.skipEnterActiveState || isTransitionDone\n          ? \"enter-done\"\n          : \"enter-active\";\n      const reservedIndex = findNewActivityIndex(event, activities);\n      return [\n        ...activities.slice(0, reservedIndex),\n        createActivityFromEvent(event, transitionState),\n        ...activities.slice(reservedIndex + 1),\n      ];\n    },\n    /**\n     * Replace activity at reservedIndex with new activity\n     */\n    Replaced: (activities: Activity[], event: ReplacedEvent): Activity[] => {\n      const reservedIndex = findNewActivityIndex(event, activities);\n\n      // reuse state of alreadyExistingActivity\n      const transitionState =\n        activities[reservedIndex]?.transitionState ??\n        (event.skipEnterActiveState || isTransitionDone\n          ? \"enter-done\"\n          : \"enter-active\");\n\n      return [\n        ...activities.slice(0, reservedIndex),\n        createActivityFromEvent(event, transitionState),\n        ...activities.slice(reservedIndex + 1),\n      ];\n    },\n    /**\n     * noop\n     */\n    Popped: (activities: Activity[], event: PoppedEvent): Activity[] =>\n      activities,\n    /**\n     * noop\n     */\n    StepPushed: (activities: Activity[], event: StepPushedEvent): Activity[] =>\n      activities,\n    /**\n     * noop\n     */\n    StepReplaced: (\n      activities: Activity[],\n      event: StepReplacedEvent,\n    ): Activity[] => activities,\n    /**\n     * noop\n     */\n    StepPopped: (activities: Activity[], event: StepPoppedEvent): Activity[] =>\n      activities,\n  });\n", "import type {\n  ActivityRegisteredEvent,\n  DomainEvent,\n  InitializedEvent,\n  PoppedEvent,\n  PushedEvent,\n  ReplacedEvent,\n  StepPoppedEvent,\n  StepPushedEvent,\n  StepReplacedEvent,\n} from \"../event-types\";\nimport type { Activity, ActivityTransitionState } from \"../Stack\";\nimport { last } from \"../utils\";\nimport { createReducer } from \"./createReducer\";\n\n/**\n * Create activity reducers for each event type (Activity + Event => Activity)\n */\nexport const makeActivityReducers = (isTransitionDone: boolean) =>\n  createReducer({\n    /**\n     * noop\n     */\n    Initialized: (activity: Activity, event: InitializedEvent): Activity =>\n      activity,\n    /**\n     * noop\n     */\n    ActivityRegistered: (\n      activity: Activity,\n      event: ActivityRegisteredEvent,\n    ): Activity => activity,\n    /**\n     * noop\n     */\n    Pushed: (activity: Activity, event: PushedEvent): Activity => activity,\n    /**\n     * Change transition state to exit-done\n     */\n    Replaced: (activity: Activity, event: ReplacedEvent): Activity => ({\n      ...activity,\n      exitedBy: event,\n      transitionState: \"exit-done\",\n    }),\n    /**\n     * Change transition state to exit-done or exit-active depending on skipExitActiveState\n     */\n    Popped: (activity: Activity, event: PoppedEvent): Activity => {\n      const transitionState: ActivityTransitionState =\n        event.skipExitActiveState || isTransitionDone\n          ? \"exit-done\"\n          : \"exit-active\";\n\n      return {\n        ...activity,\n        exitedBy: event,\n        transitionState,\n        params:\n          transitionState === \"exit-done\"\n            ? activity.steps[0].params\n            : activity.params,\n        steps:\n          transitionState === \"exit-done\"\n            ? [activity.steps[0]]\n            : activity.steps,\n      };\n    },\n    /**\n     * Replace step params\n     * Push new step\n     */\n    StepPushed: (activity: Activity, event: StepPushedEvent): Activity => {\n      const newRoute = {\n        id: event.stepId,\n        params: event.stepParams,\n        enteredBy: event,\n      };\n\n      return {\n        ...activity,\n        params: event.stepParams,\n        steps: [...activity.steps, newRoute],\n      };\n    },\n    /**\n     * Replace step params\n     * Replace the last step\n     */\n    StepReplaced: (activity: Activity, event: StepReplacedEvent): Activity => {\n      const newRoute = {\n        id: event.stepId,\n        params: event.stepParams,\n        enteredBy: event,\n      };\n\n      return {\n        ...activity,\n        params: event.stepParams,\n        steps: [\n          ...activity.steps.slice(0, activity.steps.length - 1),\n          newRoute,\n        ],\n      };\n    },\n    /**\n     * Pop the last step\n     * If there are params in the previous step, set them as the new params\n     */\n    StepPopped: (activity: Activity, event: StepPoppedEvent): Activity => {\n      activity.steps.pop();\n\n      const beforeActivityParams = last(activity.steps)?.params;\n\n      return {\n        ...activity,\n        params: beforeActivityParams ?? activity.params,\n      };\n    },\n  } as const);\n", "import type { DomainEvent } from \"../event-types\";\n\nexport function filterEvents<T extends DomainEvent[\"name\"]>(\n  events: DomainEvent[],\n  eventName: T,\n) {\n  return events.filter((e) => e.name === eventName) as Array<\n    Extract<DomainEvent, { name: T }>\n  >;\n}\n", "import type { DomainEvent } from \"../event-types\";\nimport type { BaseDomainEvent } from \"../event-types/_base\";\nimport { id, time } from \"../utils\";\n\nexport function makeEvent<T extends DomainEvent[\"name\"]>(\n  name: T,\n  parameters: Omit<\n    Extract<DomainEvent, { name: T }>,\n    \"id\" | \"name\" | \"eventDate\"\n  > &\n    Partial<BaseDomainEvent>,\n) {\n  return {\n    id: id(),\n    eventDate: time(),\n    ...parameters,\n    name,\n  } as Extract<DomainEvent, { name: T }>;\n}\n", "import type { DomainEvent } from \"../event-types\";\nimport { filterEvents } from \"./filterEvents\";\n\nexport function validateEvents(events: DomainEvent[]) {\n  if (events.length === 0) {\n    throw new Error(\"events parameter is empty\");\n  }\n\n  const initEvents = filterEvents(events, \"Initialized\");\n\n  if (initEvents.length > 1) {\n    throw new Error(\"InitializedEvent can only exist once\");\n  }\n\n  const activityRegisteredEvents = filterEvents(events, \"ActivityRegistered\");\n\n  const registeredActivityNames = new Set(\n    activityRegisteredEvents.map((e) => e.activityName),\n  );\n\n  const pushedEvents = filterEvents(events, \"Pushed\");\n\n  if (pushedEvents.some((e) => !registeredActivityNames.has(e.activityName))) {\n    throw new Error(\"the corresponding activity does not exist\");\n  }\n}\n", "import findTargetActivityIndexes from \"./activity-utils/findTargetActivityIndexes\";\nimport { makeActivitiesReducers } from \"./activity-utils/makeActivitiesReducers\";\nimport { makeActivityReducers } from \"./activity-utils/makeActivityReducers\";\nimport type { DomainEvent } from \"./event-types\";\nimport { filterEvents, validateEvents } from \"./event-utils\";\nimport type { Activity, Stack } from \"./Stack\";\nimport { compareBy, uniqBy } from \"./utils\";\n\nexport function aggregate(events: DomainEvent[], now: number): Stack {\n  const sortedEvents = uniqBy(\n    [...events].sort((a, b) => compareBy(a, b, (e) => e.id)),\n    (e) => e.id,\n  );\n\n  validateEvents(sortedEvents);\n\n  const initEvent = filterEvents(sortedEvents, \"Initialized\")[0];\n  const activityRegisteredEvents = filterEvents(events, \"ActivityRegistered\");\n  const { transitionDuration } = initEvent;\n\n  const activities = sortedEvents.reduce(\n    (activities: Activity[], event: DomainEvent) => {\n      const isTransitionDone = now - event.eventDate >= transitionDuration;\n\n      const targets = findTargetActivityIndexes(\n        activities,\n        event,\n        isTransitionDone,\n      );\n\n      const activityReducer = makeActivityReducers(isTransitionDone);\n\n      const activitiesReducer = makeActivitiesReducers(isTransitionDone);\n\n      const newActivities = activitiesReducer(activities, event);\n\n      targets.forEach((targetIdx) => {\n        newActivities[targetIdx] = activityReducer(\n          newActivities[targetIdx],\n          event,\n        );\n      });\n\n      return newActivities;\n    },\n    [],\n  );\n\n  const uniqActivities = uniqBy(activities, (activity) => activity.id);\n\n  const visibleActivities = uniqActivities.filter(\n    (activity) =>\n      activity.transitionState === \"enter-active\" ||\n      activity.transitionState === \"enter-done\" ||\n      activity.transitionState === \"exit-active\",\n  );\n  const enteredActivities = visibleActivities.filter(\n    (activity) =>\n      activity.transitionState === \"enter-active\" ||\n      activity.transitionState === \"enter-done\",\n  );\n\n  const lastVisibleActivity = visibleActivities[visibleActivities.length - 1];\n  const lastEnteredActivity = enteredActivities[enteredActivities.length - 1];\n\n  const globalTransitionState = activities.find(\n    (activity) =>\n      activity.transitionState === \"enter-active\" ||\n      activity.transitionState === \"exit-active\",\n  )\n    ? \"loading\"\n    : \"idle\";\n\n  const output: Stack = {\n    activities: uniqActivities\n      .map((activity) => {\n        const zIndex = visibleActivities.findIndex(\n          ({ id }) => id === activity.id,\n        );\n\n        return {\n          id: activity.id,\n          name: activity.name,\n          transitionState: activity.transitionState,\n          params: activity.params,\n          steps: activity.steps,\n          enteredBy: activity.enteredBy,\n          ...(activity.exitedBy\n            ? {\n                exitedBy: activity.exitedBy,\n              }\n            : null),\n          isTop: lastVisibleActivity?.id === activity.id,\n          isActive: lastEnteredActivity?.id === activity.id,\n          isRoot:\n            zIndex === 0 ||\n            (zIndex === 1 &&\n              activity.transitionState === \"enter-active\" &&\n              activity.enteredBy.name === \"Replaced\"),\n          zIndex,\n          ...(activity.context\n            ? {\n                context: activity.context,\n              }\n            : null),\n        };\n      })\n      .sort((a, b) => compareBy(a, b, (activity) => activity.id)),\n    registeredActivities: activityRegisteredEvents.map((event) => ({\n      name: event.activityName,\n      ...(event.activityParamsSchema\n        ? {\n            paramsSchema: event.activityParamsSchema,\n          }\n        : null),\n    })),\n    transitionDuration,\n    globalTransitionState,\n  };\n\n  return output;\n}\n", "/* eslint-disable no-use-before-define */\n\nimport isEqual from \"react-fast-compare\";\n\nimport { aggregate } from \"./aggregate\";\nimport type { Effect } from \"./Effect\";\nimport type { DomainEvent } from \"./event-types\";\nimport type { BaseDomainEvent } from \"./event-types/_base\";\nimport { makeEvent } from \"./event-utils\";\nimport type { StackflowActions, StackflowPlugin } from \"./interfaces\";\nimport { produceEffects } from \"./produceEffects\";\nimport type { Stack } from \"./Stack\";\nimport { once } from \"./utils\";\n\nconst SECOND = 1000;\n\n// 60FPS\nconst INTERVAL_MS = SECOND / 60;\n\nexport type MakeCoreStoreOptions = {\n  initialEvents: DomainEvent[];\n  plugins: StackflowPlugin[];\n};\n\nexport type CoreStore = {\n  actions: StackflowActions;\n  init: () => void;\n  pullEvents: () => DomainEvent[];\n  subscribe: (listener: () => void) => () => void;\n};\n\nexport function makeCoreStore(options: MakeCoreStoreOptions): CoreStore {\n  const events: {\n    value: DomainEvent[];\n  } = {\n    value: [...options.initialEvents],\n  };\n  const stack = {\n    value: aggregate(events.value, new Date().getTime()),\n  };\n\n  const storeListeners: Array<() => void> = [];\n\n  const defaultPlugin: StackflowPlugin = () => ({\n    key: \"@stackflow/core\",\n    onChanged() {\n      storeListeners.forEach((listener) => listener());\n    },\n  });\n\n  const pluginInstances: ReturnType<StackflowPlugin>[] = [\n    defaultPlugin(),\n    ...options.plugins.map((plugin) => plugin()),\n  ];\n\n  const setStackValue = (nextStackValue: Stack) => {\n    const effects = produceEffects(stack.value, nextStackValue);\n\n    stack.value = nextStackValue;\n\n    triggerPostEffectHooks(effects, pluginInstances);\n  };\n\n  const dispatchEvent: StackflowActions[\"dispatchEvent\"] = (name, params) => {\n    const newEvent = makeEvent(name, params);\n\n    const nextStackValue = aggregate(\n      [...events.value, newEvent],\n      new Date().getTime(),\n    );\n\n    events.value.push(newEvent);\n    setStackValue(nextStackValue);\n\n    const interval = setInterval(() => {\n      const nextStackValue = aggregate(events.value, new Date().getTime());\n\n      if (!isEqual(stack.value, nextStackValue)) {\n        setStackValue(nextStackValue);\n      }\n\n      if (nextStackValue.globalTransitionState === \"idle\") {\n        clearInterval(interval);\n      }\n    }, INTERVAL_MS);\n  };\n\n  function triggerPreEffectHooks<T extends DomainEvent>(\n    event: T,\n    plugins: ReturnType<StackflowPlugin>[],\n  ): {\n    isPrevented: boolean;\n    overriddenParams: Omit<T, keyof BaseDomainEvent>;\n  } {\n    let isPrevented = false;\n    let nextEvent: T = {\n      ...event,\n    };\n\n    function toParams(event: T): Omit<T, keyof BaseDomainEvent> {\n      const params: Partial<BaseDomainEvent> & Omit<T, keyof BaseDomainEvent> =\n        { ...event };\n\n      // delete params.id;\n      // delete params.eventDate;\n      delete params.name;\n\n      return params;\n    }\n\n    const preventDefault = () => {\n      isPrevented = true;\n    };\n    const overrideActionParams = (nextActionParams: any) => {\n      nextEvent = {\n        ...nextEvent,\n        ...nextActionParams,\n      };\n    };\n\n    plugins.forEach((plugin) => {\n      switch (nextEvent.name) {\n        case \"Pushed\": {\n          plugin.onBeforePush?.({\n            actionParams: {\n              ...nextEvent,\n            },\n            actions: {\n              ...actions,\n              preventDefault,\n              overrideActionParams,\n            },\n          });\n          break;\n        }\n        case \"Replaced\": {\n          plugin.onBeforeReplace?.({\n            actionParams: {\n              ...nextEvent,\n            },\n            actions: {\n              ...actions,\n              preventDefault,\n              overrideActionParams,\n            },\n          });\n          break;\n        }\n        case \"Popped\": {\n          plugin.onBeforePop?.({\n            actionParams: {\n              ...nextEvent,\n            },\n            actions: {\n              ...actions,\n              preventDefault,\n              overrideActionParams,\n            },\n          });\n          break;\n        }\n        case \"StepPushed\": {\n          plugin.onBeforeStepPush?.({\n            actionParams: {\n              ...nextEvent,\n            },\n            actions: {\n              ...actions,\n              preventDefault,\n              overrideActionParams,\n            },\n          });\n          break;\n        }\n        case \"StepReplaced\": {\n          plugin.onBeforeStepReplace?.({\n            actionParams: {\n              ...nextEvent,\n            },\n            actions: {\n              ...actions,\n              preventDefault,\n              overrideActionParams,\n            },\n          });\n          break;\n        }\n        case \"StepPopped\": {\n          plugin.onBeforeStepPop?.({\n            actionParams: {\n              ...nextEvent,\n            },\n            actions: {\n              ...actions,\n              preventDefault,\n              overrideActionParams,\n            },\n          });\n          break;\n        }\n        default:\n          break;\n      }\n    });\n\n    return {\n      isPrevented,\n      overriddenParams: toParams(nextEvent),\n    };\n  }\n\n  function triggerPostEffectHooks(\n    effects: Effect[],\n    plugins: ReturnType<StackflowPlugin>[],\n  ) {\n    effects.forEach((effect) => {\n      plugins.forEach((plugin) => {\n        switch (effect._TAG) {\n          case \"PUSHED\":\n            return plugin.onPushed?.({\n              actions,\n              effect,\n            });\n          case \"REPLACED\":\n            return plugin.onReplaced?.({\n              actions,\n              effect,\n            });\n          case \"POPPED\":\n            return plugin.onPopped?.({\n              actions,\n              effect,\n            });\n          case \"STEP_PUSHED\":\n            return plugin.onStepPushed?.({\n              actions,\n              effect,\n            });\n          case \"STEP_REPLACED\":\n            return plugin.onStepReplaced?.({\n              actions,\n              effect,\n            });\n          case \"STEP_POPPED\":\n            return plugin.onStepPopped?.({\n              actions,\n              effect,\n            });\n          case \"%SOMETHING_CHANGED%\":\n            return plugin.onChanged?.({\n              actions,\n              effect,\n            });\n          default:\n            return undefined;\n        }\n      });\n    });\n  }\n\n  const actions: StackflowActions = {\n    getStack() {\n      return stack.value;\n    },\n    dispatchEvent,\n    push(params) {\n      const { isPrevented, overriddenParams } = triggerPreEffectHooks(\n        makeEvent(\"Pushed\", params),\n        pluginInstances,\n      );\n\n      if (isPrevented) {\n        return;\n      }\n\n      dispatchEvent(\"Pushed\", overriddenParams);\n    },\n    replace(params) {\n      const { isPrevented, overriddenParams } = triggerPreEffectHooks(\n        makeEvent(\"Replaced\", params),\n        pluginInstances,\n      );\n\n      if (isPrevented) {\n        return;\n      }\n\n      dispatchEvent(\"Replaced\", overriddenParams);\n    },\n    pop(params) {\n      const { isPrevented, overriddenParams } = triggerPreEffectHooks(\n        makeEvent(\"Popped\", params ?? {}),\n        pluginInstances,\n      );\n\n      if (isPrevented) {\n        return;\n      }\n\n      dispatchEvent(\"Popped\", overriddenParams);\n    },\n    stepPush(params) {\n      const { isPrevented, overriddenParams } = triggerPreEffectHooks(\n        makeEvent(\"StepPushed\", params ?? {}),\n        pluginInstances,\n      );\n\n      if (isPrevented) {\n        return;\n      }\n\n      dispatchEvent(\"StepPushed\", overriddenParams);\n    },\n    stepReplace(params) {\n      const { isPrevented, overriddenParams } = triggerPreEffectHooks(\n        makeEvent(\"StepReplaced\", params ?? {}),\n        pluginInstances,\n      );\n\n      if (isPrevented) {\n        return;\n      }\n\n      dispatchEvent(\"StepReplaced\", overriddenParams);\n    },\n    stepPop(params) {\n      const { isPrevented, overriddenParams } = triggerPreEffectHooks(\n        makeEvent(\"StepPopped\", params ?? {}),\n        pluginInstances,\n      );\n\n      if (isPrevented) {\n        return;\n      }\n\n      dispatchEvent(\"StepPopped\", overriddenParams);\n    },\n  };\n\n  return {\n    actions,\n    init: once(() => {\n      pluginInstances.forEach((pluginInstance) => {\n        pluginInstance.onInit?.({\n          actions,\n        });\n      });\n    }),\n    pullEvents: () => events.value,\n    subscribe(listener) {\n      storeListeners.push(listener);\n\n      return function dispose() {\n        const listenerIndex = storeListeners.findIndex((l) => l === listener);\n\n        if (listenerIndex > -1) {\n          storeListeners.splice(listenerIndex, 1);\n        }\n      };\n    },\n  };\n}\n", "import isEqual from \"react-fast-compare\";\n\nimport type { Effect } from \"./Effect\";\nimport type { Stack } from \"./Stack\";\nimport { omit } from \"./utils\";\n\nexport function produceEffects(prevOutput: Stack, nextOutput: Stack): Effect[] {\n  const output: Effect[] = [];\n\n  const somethingChanged = !isEqual(prevOutput, nextOutput);\n\n  if (somethingChanged) {\n    output.push({\n      _TAG: \"%SOMETHING_CHANGED%\",\n    });\n  }\n\n  for (\n    let i = 0;\n    i < Math.max(prevOutput.activities.length, nextOutput.activities.length);\n    i += 1\n  ) {\n    const prevActivity = prevOutput.activities[i];\n    const nextActivity = nextOutput.activities[i];\n\n    const isPrevActivityPopped =\n      prevActivity?.transitionState === \"exit-done\" ||\n      prevActivity?.transitionState === \"exit-active\";\n    const isNextActivityPushed =\n      nextActivity?.transitionState === \"enter-active\" ||\n      nextActivity?.transitionState === \"enter-done\";\n\n    if (prevActivity && nextActivity && prevActivity.id === nextActivity.id) {\n      for (\n        let j = 0;\n        j <\n        Math.max(\n          (prevActivity.steps ?? []).length,\n          (nextActivity.steps ?? []).length,\n        );\n        j += 1\n      ) {\n        const prevStep = prevActivity.steps[j];\n        const nextStep = nextActivity.steps[j];\n\n        if (!prevStep && nextStep) {\n          output.push({\n            _TAG: \"STEP_PUSHED\",\n            activity: nextActivity,\n            step: nextStep,\n          });\n        } else if (prevStep && !nextStep) {\n          output.push({\n            _TAG: \"STEP_POPPED\",\n            activity: nextActivity,\n          });\n        } else if (\n          prevActivity.steps.length === nextActivity.steps.length &&\n          prevStep.id !== nextStep.id\n        ) {\n          output.push({\n            _TAG: \"STEP_REPLACED\",\n            activity: nextActivity,\n            step: nextStep,\n          });\n        }\n      }\n    }\n\n    if (!prevActivity && nextActivity) {\n      output.push({\n        _TAG: nextActivity.enteredBy.name === \"Pushed\" ? \"PUSHED\" : \"REPLACED\",\n        activity: nextActivity,\n      });\n    } else if (isPrevActivityPopped && isNextActivityPushed) {\n      output.push({\n        _TAG: nextActivity.enteredBy.name === \"Pushed\" ? \"PUSHED\" : \"REPLACED\",\n        activity: nextActivity,\n      });\n    } else if (\n      prevActivity &&\n      nextActivity &&\n      prevActivity.id === nextActivity.id &&\n      !isEqual(\n        omit(prevActivity, [\n          \"isActive\",\n          \"isTop\",\n          \"isRoot\",\n          \"transitionState\",\n          \"zIndex\",\n        ]),\n        omit(nextActivity, [\n          \"isActive\",\n          \"isTop\",\n          \"isRoot\",\n          \"transitionState\",\n          \"zIndex\",\n        ]),\n      ) &&\n      nextActivity.enteredBy.name === \"Replaced\" &&\n      !isEqual(prevActivity.enteredBy, nextActivity.enteredBy)\n    ) {\n      output.push({\n        _TAG: \"REPLACED\",\n        activity: nextActivity,\n      });\n    }\n  }\n\n  for (\n    let j =\n      Math.max(prevOutput.activities.length, nextOutput.activities.length) - 1;\n    j >= 0;\n    j -= 1\n  ) {\n    const isPrevActivityPushed =\n      prevOutput.activities[j]?.transitionState === \"enter-done\" ||\n      prevOutput.activities[j]?.transitionState === \"enter-active\";\n    const isNextActivityPopped =\n      nextOutput.activities[j]?.transitionState === \"exit-active\" ||\n      nextOutput.activities[j]?.transitionState === \"exit-done\";\n    const isReplacedEvent =\n      nextOutput.activities[j + 1]?.enteredBy.name === \"Replaced\" &&\n      nextOutput.activities[j + 1]?.transitionState === \"enter-done\";\n\n    if (isPrevActivityPushed && isNextActivityPopped && !isReplacedEvent) {\n      output.push({\n        _TAG: \"POPPED\",\n        activity: nextOutput.activities[j],\n      });\n    }\n  }\n\n  return output;\n}\n"],
  "mappings": "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",
  "names": ["activities", "id", "isEqual", "nextStackValue", "isEqual", "event"]
}
